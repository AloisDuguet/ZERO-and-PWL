<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e" kind="class" language="C++" prot="public">
    <compoundname>Algorithms::EPEC::CombinatorialPNE</compoundname>
    <basecompoundref refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base" prot="public" virt="non-virtual">Algorithms::EPEC::PolyBase</basecompoundref>
    <includes refid="epec__combinatorialpne_8h" local="no">epec_combinatorialpne.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a37d536d2f764509b2372bd33cd1cf8e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Algorithms::EPEC::CombinatorialPNE::CombinatorialPNE</definition>
        <argsstring>(GRBEnv *env, Game::EPEC *EPECObject, bool poly=true)</argsstring>
        <name>CombinatorialPNE</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>Game::EPEC *</type>
          <declname>EPECObject</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>poly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/EPEC/epec_combinatorialpne.h" line="17" column="3" bodyfile="include/algorithms/EPEC/epec_combinatorialpne.h" bodystart="17" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a7be7a3f2ee2b67ac3d29407313ede988" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Algorithms::EPEC::CombinatorialPNE::solve</definition>
        <argsstring>()</argsstring>
        <name>solve</name>
        <reimplements refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1afb53fa0b28accf7ffb71f38b7127cd8a">solve</reimplements>
        <briefdescription>
<para>A method to solve the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/EPEC/epec_combinatorialpne.h" line="20" column="8" bodyfile="include/algorithms/EPEC/epec_combinatorialpne.h" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a57d1cf8a606921df8a404ce501d4a434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::EPEC::CombinatorialPNE::solveWithExcluded</definition>
        <argsstring>(const std::vector&lt; std::set&lt; unsigned long int &gt;&gt; &amp;excludeList={})</argsstring>
        <name>solveWithExcluded</name>
        <param>
          <type>const std::vector&lt; std::set&lt; unsigned long int &gt;&gt; &amp;</type>
          <declname>excludeList</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Solve the referenced <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> instance with the Combinatorial pure-equilibrium <ref refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm" kindref="compound">Algorithm</ref> <computeroutput>exclude-list</computeroutput> contains the set of excluded polyhedra combinations.</para>
        </inbodydescription>
        <location file="include/algorithms/EPEC/epec_combinatorialpne.h" line="23" column="8" bodyfile="src/algorithms/EPEC/epec_combinatorialpne.cpp" bodystart="7" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a518b30cb79720fdc2184f888caac67ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::EPEC::CombinatorialPNE::combPNE</definition>
        <argsstring>(std::vector&lt; long int &gt; combination, const std::vector&lt; std::set&lt; unsigned long int &gt;&gt; &amp;excludeList)</argsstring>
        <name>combPNE</name>
        <param>
          <type>std::vector&lt; long int &gt;</type>
          <declname>combination</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::set&lt; unsigned long int &gt;&gt; &amp;</type>
          <declname>excludeList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Starting from <computeroutput>combination</computeroutput>, the methods builds the recursion to generate the subproblems associated with all the existing combinations of polyhedra. Then, it solves each subproblem, and if a solution is found, it terminates and stores the solution into the referenced <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> object. <computeroutput>excludeList</computeroutput> contains the excluded combinations of polyhedra.</para>
        </inbodydescription>
        <location file="include/algorithms/EPEC/epec_combinatorialpne.h" line="28" column="8" bodyfile="src/algorithms/EPEC/epec_combinatorialpne.cpp" bodystart="28" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is responsible for the Combinatorial pure-nash Equilibrium. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Algorithms::EPEC::PolyBase</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Algorithms::EPEC::Algorithm</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm"/>
      </node>
      <node id="1">
        <label>Algorithms::EPEC::CombinatorialPNE</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Algorithms::EPEC::PolyBase</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Algorithms::EPEC::Algorithm</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm"/>
      </node>
      <node id="1">
        <label>Algorithms::EPEC::CombinatorialPNE</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/algorithms/EPEC/epec_combinatorialpne.h" line="15" column="39" bodyfile="include/algorithms/EPEC/epec_combinatorialpne.h" bodystart="15" bodyend="30"/>
    <listofallmembers>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a37d536d2f764509b2372bd33cd1cf8e2" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>CombinatorialPNE</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a518b30cb79720fdc2184f888caac67ad" prot="private" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>combPNE</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1aad636a41bb0353f0c632430b6fb20937" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>Env</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1ad46009aeb82c18d485cbba1060cd325a" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>EPECObject</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a0e0cfcb04c622946a00441e7460f9959" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getNumPolyLead</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a9a5a1f8d89b1049326165049b123e109" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getPositionLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a6f83e7a8d82218dcbaf6e43255d949c7" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getPositionLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ad7777a11c5b70da40af2780802b31fab" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getPositionProbab</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a9266e3d1190be52164d30b2134236f93" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getValLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a1d7e28a9c5842d4b1fc8f9e9f4a61c71" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getValLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a22f4df7130fcc3ba15d904214e59114f" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>getValProbab</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ac1be48a137ea071862794beba97ff02a" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1aa8a48f84931889820bd8f05e250f945b" prot="public" virt="virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a5943ee10262cc33bbeb18d5a902e1b90" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a291dab58d5014bc5be3477ed500c43f5" prot="public" virt="virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a5631dd8fb9bd2d7aef4cd4137a905d15" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>makeThePureLCP</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ac6d224591f7862a5da5dcf3607016c92" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>mixedStrategyPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a3232baf0efbe5fe82c3168937a6a8d20" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>PolyBase</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a07f74282d7751de285a7e72b0377c8d6" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>PolyLCP</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ae32c59d87b904dd0b6bff19a4bf954f7" prot="protected" virt="virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>postSolving</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a7be7a3f2ee2b67ac3d29407313ede988" prot="public" virt="virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>solve</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_combinatorial_p_n_e_1a57d1cf8a606921df8a404ce501d4a434" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::CombinatorialPNE</scope><name>solveWithExcluded</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
