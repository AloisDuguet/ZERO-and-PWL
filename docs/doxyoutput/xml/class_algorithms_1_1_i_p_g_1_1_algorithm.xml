<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_algorithms_1_1_i_p_g_1_1_algorithm" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Algorithms::IPG::Algorithm</compoundname>
    <derivedcompoundref refid="class_algorithms_1_1_i_p_g_1_1_oracle" prot="public" virt="non-virtual">Algorithms::IPG::Oracle</derivedcompoundref>
    <includes refid="ipg__algorithms_8h" local="no">ipg_algorithms.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a40fd8d23d5b7378a844f2a8f2eb7c5e7" prot="protected" static="no" mutable="no">
        <type><ref refid="class_game_1_1_i_p_g" kindref="compound">Game::IPG</ref> *</type>
        <definition>Game::IPG* Algorithms::IPG::Algorithm::IPG</definition>
        <argsstring></argsstring>
        <name>IPG</name>
        <briefdescription>
<para>This abstract class is the base type that every algorithm inherits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="24" column="11" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1abab001b5624574eb693522338601547e" prot="protected" static="no" mutable="no">
        <type>GRBEnv *</type>
        <definition>GRBEnv* Algorithms::IPG::Algorithm::Env</definition>
        <argsstring></argsstring>
        <name>Env</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="25" column="11" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2879b27d2e02bb11f9a25e66768a2952" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Algorithm::Solved</definition>
        <argsstring></argsstring>
        <name>Solved</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the <ref refid="namespace_algorithms_1_1_i_p_g" kindref="compound">IPG</ref> has been solved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="26" column="12" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1ac9f81f880503bc0b4ec00e28bbd18052" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Algorithm::Pure</definition>
        <argsstring></argsstring>
        <name>Pure</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if all the players are playing a pure strategy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="27" column="12" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7b13566b24556f5bbbf8d9988c1d3112" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Algorithm::Infeasible</definition>
        <argsstring></argsstring>
        <name>Infeasible</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the game is infeasible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="28" column="12" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1afd2fddfa89835af78760431d69746d27" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Algorithms::IPG::Algorithm::Tolerance</definition>
        <argsstring></argsstring>
        <name>Tolerance</name>
        <initializer>= 1e-6</initializer>
        <briefdescription>
<para>The numeric tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="29" column="12" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a22cc835ab46ad965dc6c92dd34c5be41" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Algorithms::IPG::Algorithm::solve</definition>
        <argsstring>()=0</argsstring>
        <name>solve</name>
        <reimplementedby refid="class_algorithms_1_1_i_p_g_1_1_oracle_1ab3fd0b8a91fda4a9b1f75fb890ed9dd7">solve</reimplementedby>
        <briefdescription>
<para>A method to solve the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="32" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1ab36d94d4206b3099ab32158b3dbdf33c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Algorithms::IPG::Algorithm::isSolved</definition>
        <argsstring>() const =0</argsstring>
        <name>isSolved</name>
        <reimplementedby refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a7b65df4f88ad56ce0ff025afbabeae79">isSolved</reimplementedby>
        <briefdescription>
<para>A method to check whether the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> is solved or not, given a numerical tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="33" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7e8e3622436e6a7a4c499a72b5c41ffe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Algorithms::IPG::Algorithm::isPureStrategy</definition>
        <argsstring>() const =0</argsstring>
        <name>isPureStrategy</name>
        <reimplementedby refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a6fa92345c24a912a81586c7fea09b4dd">isPureStrategy</reimplementedby>
        <briefdescription>
<para>A method to check whether the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> solution is a pure equilibrium or not, given a numerical tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2ebafd05ba2ad887c5f17a7aa02c857c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Algorithms::IPG::Algorithm::getTol</definition>
        <argsstring>() const</argsstring>
        <name>getTol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="38" column="8" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1a33a58e32c58669adf927ffa3d14c5c4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::IPG::Algorithm::setTol</definition>
        <argsstring>(double tol)</argsstring>
        <name>setTol</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="40" column="6" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_algorithm_1aa874865ba1f03bc7bad0f768889085ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Algorithms::IPG::Algorithm::Algorithm</definition>
        <argsstring>(GRBEnv *env, Game::IPG *IPGObj)</argsstring>
        <name>Algorithm</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="class_game_1_1_i_p_g" kindref="compound">Game::IPG</ref> *</type>
          <declname>IPGObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the Games::IPG object <computeroutput>IPGObj</computeroutput> and the GRBEnv <computeroutput>env</computeroutput>, initializes the field required by the algorithm</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="42" column="1" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="42" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Algorithms::IPG::Oracle</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_oracle"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Algorithms::IPG::Algorithm</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_algorithm"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12">
        <label>Attr&lt; ZEROStatus &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="9">
        <label>Attr&lt; int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="11">
        <label>Attr&lt; Data::IPG::Algorithms &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="4">
        <label>ZEROStatistics&lt; Data::IPG::DataObject &gt;</label>
        <link refid="struct_z_e_r_o_statistics"/>
        <childnode refid="5" relation="usage">
          <edgelabel>WallClockTime</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>AlgorithmData</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>NumConstraints</edgelabel>
          <edgelabel>NumNonZero</edgelabel>
          <edgelabel>NumIterations</edgelabel>
          <edgelabel>NumVar</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>NumericalIssues</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>Status</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Game::IPG</label>
        <link refid="class_game_1_1_i_p_g"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Data::IPG::DataObject</label>
        <link refid="class_data_1_1_i_p_g_1_1_data_object"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>Algorithm</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Attr&lt; bool &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="3">
        <label>Game::AbstractGame&lt; Data::IPG::DataObject &gt;</label>
        <link refid="class_game_1_1_abstract_game"/>
        <childnode refid="4" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Algorithms::IPG::Algorithm</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_algorithm"/>
        <childnode refid="2" relation="usage">
          <edgelabel>IPG</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Attr&lt; double &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="7">
        <label>ZEROAlgorithmData</label>
        <link refid="class_z_e_r_o_algorithm_data"/>
        <childnode refid="5" relation="usage">
          <edgelabel>DeviationTolerance</edgelabel>
          <edgelabel>TimeLimit</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>RandomSeed</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>Threads</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>IndicatorConstraints</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Attr&lt; unsigned long int &gt;</label>
        <link refid="class_attr"/>
      </node>
    </collaborationgraph>
    <location file="include/games/algorithms/IPG/ipg_algorithms.h" line="18" column="17" bodyfile="include/games/algorithms/IPG/ipg_algorithms.h" bodystart="18" bodyend="50"/>
    <listofallmembers>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1aa874865ba1f03bc7bad0f768889085ea" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Algorithm</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1abab001b5624574eb693522338601547e" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Env</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2ebafd05ba2ad887c5f17a7aa02c857c" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>getTol</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7b13566b24556f5bbbf8d9988c1d3112" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Infeasible</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a40fd8d23d5b7378a844f2a8f2eb7c5e7" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>IPG</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7e8e3622436e6a7a4c499a72b5c41ffe" prot="public" virt="pure-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1ab36d94d4206b3099ab32158b3dbdf33c" prot="public" virt="pure-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1ac9f81f880503bc0b4ec00e28bbd18052" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Pure</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a33a58e32c58669adf927ffa3d14c5c4b" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>setTol</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a22cc835ab46ad965dc6c92dd34c5be41" prot="public" virt="pure-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>solve</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2879b27d2e02bb11f9a25e66768a2952" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Solved</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1afd2fddfa89835af78760431d69746d27" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Algorithm</scope><name>Tolerance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
