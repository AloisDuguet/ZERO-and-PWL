<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespace_game" kind="namespace" language="C++">
    <compoundname>Game</compoundname>
    <innerclass refid="class_game_1_1_e_p_e_c" prot="public">Game::EPEC</innerclass>
    <innerclass refid="class_game_1_1_i_p___param" prot="public">Game::IP_Param</innerclass>
    <innerclass refid="class_game_1_1_i_p_g" prot="public">Game::IPG</innerclass>
    <innerclass refid="class_game_1_1_l_c_p" prot="public">Game::LCP</innerclass>
    <innerclass refid="class_game_1_1_m_p___param" prot="public">Game::MP_Param</innerclass>
    <innerclass refid="class_game_1_1_nash_game" prot="public">Game::NashGame</innerclass>
    <innerclass refid="class_game_1_1_outer_l_c_p" prot="public">Game::OuterLCP</innerclass>
    <innerclass refid="class_game_1_1_poly_l_c_p" prot="public">Game::PolyLCP</innerclass>
    <innerclass refid="struct_game_1_1_q_p___constraints" prot="public">Game::QP_Constraints</innerclass>
    <innerclass refid="struct_game_1_1_q_p___objective" prot="public">Game::QP_Objective</innerclass>
    <innerclass refid="class_game_1_1_q_p___param" prot="public">Game::QP_Param</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_game_1a541b6d502d1d6b4c9f6a149826bdfc2f" prot="public" static="no">
        <type>struct <ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref></type>
        <definition>typedef struct Game::QP_Objective  Game::QP_objective</definition>
        <argsstring></argsstring>
        <name>QP_objective</name>
        <briefdescription>
<para>struct to handle the objective params of <ref refid="class_game_1_1_m_p___param" kindref="compound">MP_Param</ref> and inheritors </para>
        </briefdescription>
        <detaileddescription>
<para>Refer <ref refid="class_game_1_1_q_p___param" kindref="compound">QP_Param</ref> class for what Q, C and c mean. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/games.h" line="44" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_game_1a8529ffcabd12b5c6d7292f4dd6fe42cc" prot="public" static="no">
        <type>struct <ref refid="struct_game_1_1_q_p___constraints" kindref="compound">Game::QP_Constraints</ref></type>
        <definition>typedef struct Game::QP_Constraints  Game::QP_constraints</definition>
        <argsstring></argsstring>
        <name>QP_constraints</name>
        <briefdescription>
<para>struct to handle the constraint params of <ref refid="class_game_1_1_m_p___param" kindref="compound">MP_Param</ref> and inheritors </para>
        </briefdescription>
        <detaileddescription>
<para>Refer <ref refid="class_game_1_1_q_p___param" kindref="compound">QP_Param</ref> class for what A, B and b mean. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/games.h" line="50" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_game_1a26d63d30b983cbd740dd5a7037a1f9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Game::LPSolve</definition>
        <argsstring>(const arma::sp_mat &amp;A, const arma::vec &amp;b, const arma::vec &amp;c, int &amp;status, bool positivity=false)</argsstring>
        <name>LPSolve</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>A</declname>
          <briefdescription><para>The constraint matrix </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
          <briefdescription><para>RHS of the constraint matrix </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>c</declname>
          <briefdescription><para>If feasible, returns a std::vector that minimizes along this direction </para>
</briefdescription>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>status</declname>
          <briefdescription><para>Status of the optimization problem. If optimal, this will be GRB_OPTIMAL </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>positivity</declname>
          <defval>false</defval>
          <briefdescription><para>Should <formula id="5">$x\geq0$</formula> be enforced? </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the polyhedron given by <formula id="6">$ Ax\leq b$</formula> is feasible. If yes, returns the point <formula id="7">$x$</formula> in the polyhedron that minimizes <formula id="8">$c^Tx$</formula> positivity can be enforced on the variables easily. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/games.h" line="12" column="13" bodyfile="src/games/games.cpp" bodystart="191" bodyend="238" declfile="include/games/games.h" declline="12" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1ab51edb9870dec0f53df966c51ac8221f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::convexHull</definition>
        <argsstring>(const std::vector&lt; arma::sp_mat * &gt; *Ai, const std::vector&lt; arma::vec * &gt; *bi, arma::sp_mat &amp;A, arma::vec &amp;b, arma::sp_mat Acom={}, arma::vec bcom={})</argsstring>
        <name>convexHull</name>
        <param>
          <type>const std::vector&lt; arma::sp_mat * &gt; *</type>
          <declname>Ai</declname>
          <briefdescription><para>Inequality constraints LHS that define polyhedra whose convex hull is to be found </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec * &gt; *</type>
          <declname>bi</declname>
          <briefdescription><para>Inequality constraints RHS that define polyhedra whose convex hull is to be found </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>A</declname>
          <briefdescription><para>Pointer to store the output of the convex hull LHS </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>b</declname>
          <briefdescription><para>Pointer to store the output of the convex hull RHS </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat</type>
          <declname>Acom</declname>
          <defval>{}</defval>
          <briefdescription><para>any common constraints to all the polyhedra - lhs. </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>bcom</declname>
          <defval>{}</defval>
          <briefdescription><para>Any common constraints to ALL the polyhedra - RHS. </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Computing convex hull of finite union of polyhedra. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the convex hull of a finite union of polyhedra where each polyhedra <formula id="3">$P_i$</formula> is of the form <formula id="4">\begin{eqnarray} A^ix &amp;\leq&amp; b^i\\ x &amp;\geq&amp; 0 \end{eqnarray}</formula> This uses Balas&apos; approach to compute the convex hull.</para>
<para><bold>Cross reference:</bold> Conforti, Michele; Cornuéjols, Gérard; and Zambelli, Giacomo. Integer programming. Vol. 271. Berlin: Springer, 2014. Refer: Eqn 4.31 </para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Perform increasingly better inner approximations in</para>
<para>&lt; iterations</para>
        </inbodydescription>
        <location file="include/games/games.h" line="18" column="16" bodyfile="src/games/games.cpp" bodystart="7" bodyend="111" declfile="include/games/games.h" declline="18" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1a4e0a017b2135a46c9e20866274e1127d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::compConvSize</definition>
        <argsstring>(arma::sp_mat &amp;A, unsigned int nFinCons, unsigned int nFinVar, const std::vector&lt; arma::sp_mat * &gt; *Ai, const std::vector&lt; arma::vec * &gt; *bi, const arma::sp_mat &amp;Acom, const arma::vec &amp;bcom)</argsstring>
        <name>compConvSize</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>A</declname>
          <briefdescription><para>Output parameter </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nFinCons</declname>
          <briefdescription><para>Number of rows in final matrix A </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nFinVar</declname>
          <briefdescription><para>Number of columns in the final matrix A </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; arma::sp_mat * &gt; *</type>
          <declname>Ai</declname>
          <briefdescription><para>Inequality constraints LHS that define polyhedra whose convex hull is to be found </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec * &gt; *</type>
          <declname>bi</declname>
          <briefdescription><para>Inequality constraints RHS that define polyhedra whose convex hull is to be found </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>Acom</declname>
          <briefdescription><para>LHS of the common constraints for all polyhedra </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>bcom</declname>
          <briefdescription><para>RHS of the common constraints for all polyhedra </para>
</briefdescription>
        </param>
        <briefdescription>
<para>INTERNAL FUNCTION NOT FOR GENERAL USE. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>INTERNAL FUNCTION NOT FOR GENERAL USE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/games.h" line="25" column="8" bodyfile="src/games/games.cpp" bodystart="113" bodyend="189" declfile="include/games/games.h" declline="25" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1a33e82b9df7ee413620f2b5d26c289f98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::isZero</definition>
        <argsstring>(arma::mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given matrix M is a zero matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance, below which a number is treated as 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Tolerance &lt; 0 always returns <computeroutput>false</computeroutput> with no error.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games/games.h" line="33" column="8" bodyfile="src/games/games.cpp" bodystart="240" bodyend="250" declfile="include/games/games.h" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1a1c0adf3888db1939dc071c64c6e80d3f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::isZero</definition>
        <argsstring>(arma::sp_mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::sp_mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given sparse matrix M is a zero matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance, below which a number is treated as 0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </inbodydescription>
        <location file="include/games/games.h" line="35" column="8" bodyfile="src/games/games.cpp" bodystart="252" bodyend="264" declfile="include/games/games.h" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1ae84120c7363ce11ee8cb58b113eaf6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Game::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const QP_Param &amp;Q)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_game_1_1_q_p___param" kindref="compound">QP_Param</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/nash.h" line="182" column="3" bodyfile="src/games/qpmp.cpp" bodystart="15" bodyend="20" declfile="include/games/nash.h" declline="182" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1a774057f73ba2c3cbf2bc3870b8136f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; Game::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ost, const perps &amp;C)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ost</declname>
        </param>
        <param>
          <type>const <ref refid="zero_8h_1ad87785d9eb3e6e48c0895b348f6660ca" kindref="member">perps</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/nash.h" line="184" column="3" bodyfile="src/games/qpmp.cpp" bodystart="8" bodyend="13" declfile="include/games/nash.h" declline="184" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_game_1ae10005492ee312cb7baba9b3d09c77d3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::print</definition>
        <argsstring>(const perps &amp;C) noexcept</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="zero_8h_1ad87785d9eb3e6e48c0895b348f6660ca" kindref="member">perps</ref> &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/nash.h" line="186" column="8" bodyfile="src/games/games.cpp" bodystart="266" bodyend="270" declfile="include/games/nash.h" declline="186" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/games/EPEC_test.h" line="63" column="14"/>
  </compounddef>
</doxygen>
