<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespace_utils" kind="namespace" language="C++">
    <compoundname>Utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_utils_1a0c79f31066b7e7af7b1d18316f3efc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Utils::resizePatch</definition>
        <argsstring>(const arma::sp_mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing sp_mat</para>
<para>Armadillo sp_mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::sp_mat</para>
        </inbodydescription>
        <location file="include/utils.h" line="13" column="14" bodyfile="src/Utils.cpp" bodystart="9" bodyend="30" declfile="include/utils.h" declline="13" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3f2695b26a8131bc0fe45fcae0c7023d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::mat</type>
        <definition>arma::mat Utils::resizePatch</definition>
        <argsstring>(const arma::mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing mat</para>
<para>Armadillo mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::mat</para>
        </inbodydescription>
        <location file="include/utils.h" line="16" column="11" bodyfile="src/Utils.cpp" bodystart="33" bodyend="54" declfile="include/utils.h" declline="16" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a8748d4160459a637b32e309336969c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Utils::resizePatch</definition>
        <argsstring>(const arma::vec &amp;mat, const unsigned int nR)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing vec</para>
<para>Armadillo vec::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::vec</para>
        </inbodydescription>
        <location file="include/utils.h" line="19" column="11" bodyfile="src/Utils.cpp" bodystart="57" bodyend="71" declfile="include/utils.h" declline="19" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a61870426848613ebcd38331a4e05e716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::vec &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="22" column="6" declfile="include/utils.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5564b70694570623dc79e723715dfdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::vec &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="25" column="10" declfile="include/utils.h" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5f5f645750d3b82e63e5f96723c62ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::sp_mat &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="29" column="6" declfile="include/utils.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a539f748060b159cd9c3fd87ecf12ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::sp_mat &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="32" column="10" declfile="include/utils.h" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ae2dddf8c7060984fd5cd56bf3fbb5b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::vector&lt; double &gt; v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="36" column="6" declfile="include/utils.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a45ec12e86322677e2a93e37aa798e1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="39" column="10" declfile="include/utils.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5199a480ca51ac0ab387e025df9b2e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::string v, const std::string out, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::string</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="43" column="6" declfile="include/utils.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a4bb2fe103587ca0fc76ae3dfa90f6550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::string &amp;v, const std::string in, long int pos)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="45" column="10" declfile="include/utils.h" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aa7023f92db9e7ef180450d9ed74ade7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const long int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const long int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="48" column="6" declfile="include/utils.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ab7b9cda903f076c6a33d6bfed99687ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(long int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>long int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="51" column="10" declfile="include/utils.h" declline="51" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aaf5fef95399ba94379ed1ee4e20cd354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const unsigned int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const unsigned int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="55" column="6" declfile="include/utils.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a048882f6fb236cfd507d3b091c7aa831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(unsigned int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>unsigned int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="58" column="10" declfile="include/utils.h" declline="58" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a6b312d0a6805b263fbf4e3219d27ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int Utils::vecToNum</definition>
        <argsstring>(std::vector&lt; short int &gt; binary)</argsstring>
        <name>vecToNum</name>
        <param>
          <type>std::vector&lt; short int &gt;</type>
          <declname>binary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="62" column="19" bodyfile="src/Utils.cpp" bodystart="350" bodyend="360" declfile="include/utils.h" declline="62" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3e6fb0ca43609e12a88d037acfd84d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Utils::numToVec</definition>
        <argsstring>(unsigned long int number, const unsigned long nCompl)</argsstring>
        <name>numToVec</name>
        <param>
          <type>unsigned long int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const unsigned long</type>
          <declname>nCompl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/utils.h" line="64" column="13" bodyfile="src/Utils.cpp" bodystart="362" bodyend="373" declfile="include/utils.h" declline="64" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/utils.h" line="12" column="15"/>
  </compounddef>
</doxygen>
