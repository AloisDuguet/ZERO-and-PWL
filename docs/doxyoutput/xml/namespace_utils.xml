<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespace_utils" kind="namespace" language="C++">
    <compoundname>Utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_utils_1a0c79f31066b7e7af7b1d18316f3efc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Utils::resizePatch</definition>
        <argsstring>(const arma::sp_mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing arma::sp_mat</para>
<para>Armadillo arma::sp_mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::sp_mat</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="23" column="16" bodyfile="src/support/utils.cpp" bodystart="21" bodyend="41" declfile="include/support/utils.h" declline="23" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3f2695b26a8131bc0fe45fcae0c7023d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::mat</type>
        <definition>arma::mat Utils::resizePatch</definition>
        <argsstring>(const arma::mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing mat</para>
<para>Armadillo mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::mat</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="25" column="13" bodyfile="src/support/utils.cpp" bodystart="44" bodyend="64" declfile="include/support/utils.h" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a8748d4160459a637b32e309336969c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Utils::resizePatch</definition>
        <argsstring>(const arma::vec &amp;mat, const unsigned int nR)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing arma::vec</para>
<para>Armadillo arma::vec::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::vec</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="27" column="13" bodyfile="src/support/utils.cpp" bodystart="67" bodyend="81" declfile="include/support/utils.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ac18b4a9ad0028ecef8c39abe3673fa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsRow</definition>
        <argsstring>(const arma::sp_mat &amp;A, const arma::vec &amp;row, const double tol=1e-6)</argsstring>
        <name>containsRow</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="29" column="8" bodyfile="src/support/utils.cpp" bodystart="417" bodyend="433" declfile="include/support/utils.h" declline="29" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1acc29a13b2b25cfa7102edf2229af4813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsElement</definition>
        <argsstring>(const arma::vec &amp;b, const double &amp;element, const double tol=1e-6)</argsstring>
        <name>containsElement</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="30" column="8" bodyfile="src/support/utils.cpp" bodystart="409" bodyend="415" declfile="include/support/utils.h" declline="30" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a03c80abd5bb5411608a27a29bf29cfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsConstraint</definition>
        <argsstring>(const arma::sp_mat &amp;A, const arma::vec &amp;b, const arma::vec &amp;lhs, const double &amp;rhs, const double tol=1e-6)</argsstring>
        <name>containsConstraint</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="31" column="8" bodyfile="src/support/utils.cpp" bodystart="387" bodyend="407" declfile="include/support/utils.h" declline="31" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a557313dad647d166c963d865f0740a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsConstraint</definition>
        <argsstring>(const arma::sp_mat &amp;A, const arma::vec &amp;b, const arma::sp_mat &amp;lhs, const double &amp;rhs, const double tol=1e-6)</argsstring>
        <name>containsConstraint</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="36" column="8" bodyfile="src/support/utils.cpp" bodystart="434" bodyend="443" declfile="include/support/utils.h" declline="36" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a61870426848613ebcd38331a4e05e716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::vec &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>The arma::vec to be saved </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
          <briefdescription><para>File name of the output file </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
          <briefdescription><para>A header that might be used to check data correctness </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
          <briefdescription><para>Should the arma::vec be appended to the current file or overwritten </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to append an arma::vec to a data file.</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="43" column="8" bodyfile="src/support/utils.cpp" bodystart="201" bodyend="225" declfile="include/support/utils.h" declline="43" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5564b70694570623dc79e723715dfdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::vec &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>Read and store the solution in this matrix. </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
          <briefdescription><para>File to read from (could be file very many data is appended one below another) </para>
</briefdescription>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
          <briefdescription><para>Position in the long file where reading should start </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
          <briefdescription><para>Any header to check data sanctity </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to read an arma::vec from a long file. <simplesect kind="return"><para>The end position from which the next data object can be read.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="49" column="3" bodyfile="src/support/utils.cpp" bodystart="227" bodyend="259" declfile="include/support/utils.h" declline="49" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5f5f645750d3b82e63e5f96723c62ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::sp_mat &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>The arma::sp_mat to be saved </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
          <briefdescription><para>File name of the output file </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
          <briefdescription><para>A header that might be used to check data correctness </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
          <briefdescription><para>Should the matrix be appended to the current file or overwritten </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility to append an arma::sp_mat to a data file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="52" column="8" bodyfile="src/support/utils.cpp" bodystart="83" bodyend="110" declfile="include/support/utils.h" declline="52" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a539f748060b159cd9c3fd87ecf12ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::sp_mat &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>Read and store the solution in this matrix. </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
          <briefdescription><para>File to read from (could be file very many data is appended one below another) </para>
</briefdescription>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
          <briefdescription><para>Position in the long file where reading should start </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
          <briefdescription><para>Any header to check data sanctity </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility to read an arma::sp_mat from a long file. <simplesect kind="return"><para>The end position from which the next data object can be read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="57" column="12" bodyfile="src/support/utils.cpp" bodystart="112" bodyend="158" declfile="include/support/utils.h" declline="57" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ae2dddf8c7060984fd5cd56bf3fbb5b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::vector&lt; double &gt; v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to append an std::vector&lt;double&gt; to a data file.</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="63" column="8" bodyfile="src/support/utils.cpp" bodystart="160" bodyend="172" declfile="include/support/utils.h" declline="63" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a45ec12e86322677e2a93e37aa798e1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to read an std::vector&lt;double&gt; from a long file. <simplesect kind="return"><para>The end position from which the next data object can be read.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="68" column="12" bodyfile="src/support/utils.cpp" bodystart="175" bodyend="199" declfile="include/support/utils.h" declline="68" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5199a480ca51ac0ab387e025df9b2e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::string v, const std::string out, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::string</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility to save a long int to file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="74" column="8" bodyfile="src/support/utils.cpp" bodystart="337" bodyend="345" declfile="include/support/utils.h" declline="74" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a4bb2fe103587ca0fc76ae3dfa90f6550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::string &amp;v, const std::string in, long int pos)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to read a std::string from a long file. <simplesect kind="return"><para>The end position from which the next data object can be read.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="76" column="12" bodyfile="src/support/utils.cpp" bodystart="347" bodyend="363" declfile="include/support/utils.h" declline="76" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aa7023f92db9e7ef180450d9ed74ade7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const long int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const long int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility to save a long int to file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="79" column="8" bodyfile="src/support/utils.cpp" bodystart="261" bodyend="273" declfile="include/support/utils.h" declline="79" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ab7b9cda903f076c6a33d6bfed99687ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(long int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>long int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Utility to read a long int from a long file. <simplesect kind="return"><para>The end position from which the next data object can be read.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="85" column="3" bodyfile="src/support/utils.cpp" bodystart="276" bodyend="299" declfile="include/support/utils.h" declline="85" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aaf5fef95399ba94379ed1ee4e20cd354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const unsigned int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const unsigned int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility to save a long int to file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="88" column="8" bodyfile="src/support/utils.cpp" bodystart="301" bodyend="313" declfile="include/support/utils.h" declline="88" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a048882f6fb236cfd507d3b091c7aa831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(unsigned int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>unsigned int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="94" column="3" bodyfile="src/support/utils.cpp" bodystart="316" bodyend="335" declfile="include/support/utils.h" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a6b312d0a6805b263fbf4e3219d27ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int Utils::vecToNum</definition>
        <argsstring>(std::vector&lt; short int &gt; binary)</argsstring>
        <name>vecToNum</name>
        <param>
          <type>std::vector&lt; short int &gt;</type>
          <declname>binary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="97" column="21" bodyfile="src/support/utils.cpp" bodystart="364" bodyend="374" declfile="include/support/utils.h" declline="97" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3e6fb0ca43609e12a88d037acfd84d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Utils::numToVec</definition>
        <argsstring>(unsigned long int number, const unsigned long nCompl)</argsstring>
        <name>numToVec</name>
        <param>
          <type>unsigned long int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const unsigned long</type>
          <declname>nCompl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="99" column="15" bodyfile="src/support/utils.cpp" bodystart="376" bodyend="385" declfile="include/support/utils.h" declline="99" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a11aefd04593b7eba9a60fe5a003eccb3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::isZero</definition>
        <argsstring>(arma::mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given matrix M is a zero matrix</para>
<para><computeroutput>tol</computeroutput> Tolerance, below which a number is treated as 0 <simplesect kind="warning"><para>Tolerance &lt; 0 always returns <computeroutput>false</computeroutput> with no error.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="101" column="8" bodyfile="src/support/utils.cpp" bodystart="446" bodyend="456" declfile="include/support/utils.h" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aa580da91e3cbe8df451f84747c1e2872" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::isZero</definition>
        <argsstring>(arma::sp_mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::sp_mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given sparse matrix M is a zero matrix</para>
<para><computeroutput>tol</computeroutput> Tolerance, below which a number is treated as 0</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="103" column="8" bodyfile="src/support/utils.cpp" bodystart="458" bodyend="470" declfile="include/support/utils.h" declline="103" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/support/utils.h" line="22" column="15"/>
  </compounddef>
</doxygen>
