<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespace_utils" kind="namespace" language="C++">
    <compoundname>Utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_utils_1a0c79f31066b7e7af7b1d18316f3efc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Utils::resizePatch</definition>
        <argsstring>(const arma::sp_mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing sp_mat</para>
<para>Armadillo sp_mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::sp_mat</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="26" column="16" bodyfile="src/support/utils.cpp" bodystart="23" bodyend="43" declfile="include/support/utils.h" declline="26" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3f2695b26a8131bc0fe45fcae0c7023d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::mat</type>
        <definition>arma::mat Utils::resizePatch</definition>
        <argsstring>(const arma::mat &amp;mat, const unsigned int nR, const unsigned int nC)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing mat</para>
<para>Armadillo mat::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::mat</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="28" column="13" bodyfile="src/support/utils.cpp" bodystart="46" bodyend="66" declfile="include/support/utils.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a8748d4160459a637b32e309336969c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Utils::resizePatch</definition>
        <argsstring>(const arma::vec &amp;mat, const unsigned int nR)</argsstring>
        <name>resizePatch</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>nR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Armadillo patch for resizing vec</para>
<para>Armadillo vec::resize() is not robust as it initializes garbage values to new columns. This fixes the problem by creating new columns with guaranteed zero values. For arma::vec</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="30" column="13" bodyfile="src/support/utils.cpp" bodystart="69" bodyend="83" declfile="include/support/utils.h" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ac18b4a9ad0028ecef8c39abe3673fa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsRow</definition>
        <argsstring>(const arma::sp_mat &amp;A, const arma::vec &amp;row, const double tol=1e-6)</argsstring>
        <name>containsRow</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="32" column="13" declfile="include/support/utils.h" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1acc29a13b2b25cfa7102edf2229af4813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsElement</definition>
        <argsstring>(const arma::vec &amp;b, const double &amp;element, const double tol=1e-6)</argsstring>
        <name>containsElement</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="33" column="13" declfile="include/support/utils.h" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a011561a3cbaf28e7e6cb4f802ec9ed91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsConstraint</definition>
        <argsstring>(arma::sp_mat &amp;A, const arma::vec &amp;b, const arma::vec &amp;lhs, const double &amp;rhs, const double tol=1e-6)</argsstring>
        <name>containsConstraint</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="34" column="13" declfile="include/support/utils.h" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a2be4a26366e1854d81a8493bec6bba2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::containsConstraint</definition>
        <argsstring>(arma::sp_mat &amp;A, const arma::vec &amp;b, const arma::sp_mat &amp;lhs, const double &amp;rhs, const double tol=1e-6)</argsstring>
        <name>containsConstraint</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="39" column="13" declfile="include/support/utils.h" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a80a70a196c537123d7e8542e2501e12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Utils::normalize</definition>
        <argsstring>(const arma::vec input)</argsstring>
        <name>normalize</name>
        <param>
          <type>const arma::vec</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="44" column="13" bodyfile="src/support/utils.cpp" bodystart="428" bodyend="439" declfile="include/support/utils.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a61870426848613ebcd38331a4e05e716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::vec &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="47" column="8" declfile="include/support/utils.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5564b70694570623dc79e723715dfdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::vec &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="53" column="3" declfile="include/support/utils.h" declline="53" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5f5f645750d3b82e63e5f96723c62ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const arma::sp_mat &amp;matrix, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="56" column="8" declfile="include/support/utils.h" declline="56" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a539f748060b159cd9c3fd87ecf12ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(arma::sp_mat &amp;matrix, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="61" column="12" declfile="include/support/utils.h" declline="61" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ae2dddf8c7060984fd5cd56bf3fbb5b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::vector&lt; double &gt; v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="67" column="8" declfile="include/support/utils.h" declline="67" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a45ec12e86322677e2a93e37aa798e1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="72" column="12" declfile="include/support/utils.h" declline="72" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a5199a480ca51ac0ab387e025df9b2e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const std::string v, const std::string out, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const std::string</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="78" column="8" declfile="include/support/utils.h" declline="78" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a4bb2fe103587ca0fc76ae3dfa90f6550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(std::string &amp;v, const std::string in, long int pos)</argsstring>
        <name>appendRead</name>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="80" column="12" declfile="include/support/utils.h" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aa7023f92db9e7ef180450d9ed74ade7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const long int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const long int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="83" column="8" declfile="include/support/utils.h" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1ab7b9cda903f076c6a33d6bfed99687ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(long int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>long int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="89" column="3" declfile="include/support/utils.h" declline="89" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aaf5fef95399ba94379ed1ee4e20cd354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::appendSave</definition>
        <argsstring>(const unsigned int v, const std::string out, const std::string header=&quot;&quot;, bool erase=false)</argsstring>
        <name>appendSave</name>
        <param>
          <type>const unsigned int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="92" column="8" declfile="include/support/utils.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a048882f6fb236cfd507d3b091c7aa831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Utils::appendRead</definition>
        <argsstring>(unsigned int &amp;v, const std::string in, long int pos, const std::string header=&quot;&quot;)</argsstring>
        <name>appendRead</name>
        <param>
          <type>unsigned int &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="98" column="3" declfile="include/support/utils.h" declline="98" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a6b312d0a6805b263fbf4e3219d27ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int Utils::vecToNum</definition>
        <argsstring>(std::vector&lt; short int &gt; binary)</argsstring>
        <name>vecToNum</name>
        <param>
          <type>std::vector&lt; short int &gt;</type>
          <declname>binary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="101" column="21" bodyfile="src/support/utils.cpp" bodystart="354" bodyend="364" declfile="include/support/utils.h" declline="101" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a3e6fb0ca43609e12a88d037acfd84d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Utils::numToVec</definition>
        <argsstring>(unsigned long int number, const unsigned long nCompl)</argsstring>
        <name>numToVec</name>
        <param>
          <type>unsigned long int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const unsigned long</type>
          <declname>nCompl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/support/utils.h" line="103" column="15" bodyfile="src/support/utils.cpp" bodystart="366" bodyend="375" declfile="include/support/utils.h" declline="103" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1a11aefd04593b7eba9a60fe5a003eccb3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::isZero</definition>
        <argsstring>(arma::mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given matrix M is a zero matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance, below which a number is treated as 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Tolerance &lt; 0 always returns <computeroutput>false</computeroutput> with no error.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="105" column="8" bodyfile="src/support/utils.cpp" bodystart="442" bodyend="452" declfile="include/support/utils.h" declline="105" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_utils_1aa580da91e3cbe8df451f84747c1e2872" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Utils::isZero</definition>
        <argsstring>(arma::sp_mat M, double tol=1e-6) noexcept</argsstring>
        <name>isZero</name>
        <param>
          <type>arma::sp_mat</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checking if a given sparse matrix M is a zero matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance, below which a number is treated as 0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </inbodydescription>
        <location file="include/support/utils.h" line="107" column="8" bodyfile="src/support/utils.cpp" bodystart="454" bodyend="466" declfile="include/support/utils.h" declline="107" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/support/utils.h" line="25" column="15"/>
  </compounddef>
</doxygen>
