<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_algorithms_1_1_poly_base" kind="class" language="C++" prot="public">
    <compoundname>Algorithms::PolyBase</compoundname>
    <basecompoundref refid="class_algorithms_1_1_algorithm" prot="public" virt="non-virtual">Algorithms::Algorithm</basecompoundref>
    <derivedcompoundref refid="class_algorithms_1_1_combinatorial_p_n_e" prot="public" virt="non-virtual">Algorithms::CombinatorialPNE</derivedcompoundref>
    <derivedcompoundref refid="class_algorithms_1_1_full_enumeration" prot="public" virt="non-virtual">Algorithms::FullEnumeration</derivedcompoundref>
    <derivedcompoundref refid="class_algorithms_1_1_inner_approximation" prot="public" virt="non-virtual">Algorithms::InnerApproximation</derivedcompoundref>
    <includes refid="polybase_8h" local="no">polybase.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_algorithms_1_1_poly_base_1afddd2b644ad54f462303315088234600" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_poly_l_c_p" kindref="compound">Game::PolyLCP</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::PolyLCP&gt; &gt; Algorithms::PolyBase::PolyLCP</definition>
        <argsstring></argsstring>
        <name>PolyLCP</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is the abstract class of <ref refid="namespace_algorithms" kindref="compound">Algorithms</ref> for full enumeration, inner approximation, and Combinatorial PNE. It provides a constructor where the Gurobi environment and the EPEC are passed. This is an abstract class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="14" column="15" bodyfile="include/algorithms/polybase.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a66e196274f52293e5d442a3c1e44220e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Algorithms::PolyBase::postSolving</definition>
        <argsstring>() override</argsstring>
        <name>postSolving</name>
        <reimplements refid="class_algorithms_1_1_algorithm_1ae1259794a607355e05218dccc00b8cba">postSolving</reimplements>
        <briefdescription>
<para>A protected method to be called after solving the EPEC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Perform postSolving operations. For instance, it updates the statistics associated with the feasible polyhedra. The responsability for calling this method is left to the inheritor</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="16" column="8" bodyfile="include/algorithms/polybase.h" bodystart="16" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a1f78be58a2d6bb79a68d493a14912c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Algorithms::PolyBase::PolyBase</definition>
        <argsstring>(GRBEnv *env, Game::EPEC *EPECObject)</argsstring>
        <name>PolyBase</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> *</type>
          <declname>EPECObject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="30" column="3" bodyfile="include/algorithms/polybase.h" bodystart="30" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a7b1d145bcea0de98ae44efc2c75c2939" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::PolyBase::isSolved</definition>
        <argsstring>(unsigned int *countryNumber, arma::vec *profitableDeviation, double tol=-1) const</argsstring>
        <name>isSolved</name>
        <param>
          <type>unsigned int *</type>
          <declname>countryNumber</declname>
        </param>
        <param>
          <type>arma::vec *</type>
          <declname>profitableDeviation</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@briefs Checks if <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> is solved, otherwise it returns a proof.</para>
<para>Analogous to <ref refid="class_game_1_1_nash_game_1a28ff99cbe8f408add01afcbda9249934" kindref="member">Game::NashGame::isSolved</ref> but checks if the given <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> is solved. If it is solved, then retruns true. If not, it returns the country which has a profitable deviation in <computeroutput>countryNumber</computeroutput> and the profitable deviation in <computeroutput>profitableDeviation</computeroutput>. <computeroutput>Tolerance</computeroutput> is the tolerance for the check. If the <emphasis> improved objective </emphasis> after the deviation is less than <computeroutput>Tolerance</computeroutput>, then it is not considered as a profitable deviation.</para>
<para>Thus we check if the given point is an <formula id="0">$\epsilon$</formula>-equilibrium. Value of <formula id="1">$\epsilon $</formula> can be chosen sufficiently close to 0.</para>
<para><simplesect kind="warning"><para>Setting <computeroutput>Tolerance</computeroutput> = 0 might even reject a real solution as not solved. This is due to Numerical issues arising from the LCP solver (Gurobi). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="47" column="8" bodyfile="src/algorithms/PolyBase.cpp" bodystart="5" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1ac27d78674528f933621deccc71f66501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Algorithms::PolyBase::isSolved</definition>
        <argsstring>(double tol=-1) const override</argsstring>
        <name>isSolved</name>
        <reimplements refid="class_algorithms_1_1_algorithm_1abb0cd9edc4ad90b96499bce47475b4d7">isSolved</reimplements>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A method to check whether the EPEC is solved or not, given a numerical tolerance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="49" column="8" bodyfile="src/algorithms/PolyBase.cpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1abe79ddc6a7707a82b399b75b102c2331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::PolyBase::makeThePureLCP</definition>
        <argsstring>(bool indicators)</argsstring>
        <name>makeThePureLCP</name>
        <param>
          <type>bool</type>
          <declname>indicators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that <ref refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" kindref="member">Game::EPEC::LCPModel</ref> is filled with the final LCP, directs the search toward a pure nash EQ. If such an equilibrium does not exist, then the model will return anyway a MNE. The original LCP is stored in the field <ref refid="class_game_1_1_e_p_e_c_1ada0cf8c4cefee9d0e3f6fcd29aa4fac0" kindref="member">Game::EPEC::LCPModelBase</ref>. <computeroutput>Indicators</computeroutput> dictates whether the resulting LCP should use indicator constraints instead of general binaries. In general, there are advantages in using the binary variables instead of such constraints, since there is no BigM involved in the formulation.</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="50" column="8" bodyfile="src/algorithms/PolyBase.cpp" bodystart="222" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a86c4dde773b300f57f9968c7250d0f8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Algorithms::PolyBase::getValLeadFollPoly</definition>
        <argsstring>(unsigned int i, unsigned int j, unsigned int k, double tol=1e-5) const</argsstring>
        <name>getValLeadFollPoly</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>For the i-th leader, gets the k-th pure strategy for i-th leader at position j</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="52" column="10" bodyfile="src/algorithms/PolyBase.cpp" bodystart="176" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1ac3c83ac88bf7bd84238781bbf1be68c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Algorithms::PolyBase::getValLeadLeadPoly</definition>
        <argsstring>(unsigned int i, unsigned int j, unsigned int k, double tol=1e-5) const</argsstring>
        <name>getValLeadLeadPoly</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>For the i-th leader, gets the k-th pure strategy for i-th leader at non-follower leader position j</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="55" column="10" bodyfile="src/algorithms/PolyBase.cpp" bodystart="199" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1aa9ef9760237673271aa3dd174992f4ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Algorithms::PolyBase::getValProbab</definition>
        <argsstring>(unsigned int i, unsigned int k) const</argsstring>
        <name>getValProbab</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the probability associated with the k-th polyhedron (k-th pure strategy) of the i-th leader.</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="58" column="10" bodyfile="src/algorithms/PolyBase.cpp" bodystart="162" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1aa09f61d5c01cbeaaf02471e2182134ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::PolyBase::isPureStrategy</definition>
        <argsstring>(unsigned int i, double tol=1e-5) const</argsstring>
        <name>isPureStrategy</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checks if the returned strategy leader is a pure strategy for the leader i. The strategy is considered a pure strategy, if it is played with a probability greater than 1 - Tolerance;</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="60" column="8" bodyfile="src/algorithms/PolyBase.cpp" bodystart="127" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a7bf62bee2c06bc6b3de5f4a1bbacf716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Algorithms::PolyBase::isPureStrategy</definition>
        <argsstring>(double tol=1e-5) const override</argsstring>
        <name>isPureStrategy</name>
        <reimplements refid="class_algorithms_1_1_algorithm_1a96cdcca66c77e71c02092b58b52a8f6b">isPureStrategy</reimplements>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A method to check whether the EPEC solution is a pure equilibrium or not, given a numerical tolerance </para>
        </detaileddescription>
        <inbodydescription>
<para>Checks if the returned strategy leader is a pure strategy for the leader i. The strategy is considered a pure strategy, if it is played with a probability greater than 1 - Tolerance;</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="62" column="8" bodyfile="src/algorithms/PolyBase.cpp" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a08033828621a4e73c37c2041e029614d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt; unsigned int &gt; Algorithms::PolyBase::mixedStrategyPoly</definition>
        <argsstring>(unsigned int i, double tol=1e-5) const</argsstring>
        <name>mixedStrategyPoly</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices of polyhedra feasible for the leader, from which strategies are played with probability greater than Tolerance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="64" column="15" bodyfile="src/algorithms/PolyBase.cpp" bodystart="144" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1ae334c85da0d64e0c8b8471f2233dd449" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Algorithms::PolyBase::getPositionLeadFollPoly</definition>
        <argsstring>(unsigned int i, unsigned int j, unsigned int k) const</argsstring>
        <name>getPositionLeadFollPoly</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the k-th follower variable of the i-th leader, in the j-th feasible polyhedron.</para>
<para>Indeed it should hold that <formula id="2">$ j &lt; $</formula> Algorithms::PolyBase::getNumPolyLead(i)</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="66" column="16" bodyfile="src/algorithms/PolyBase.cpp" bodystart="58" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1af721963dcce33b7acbeaee904c485116" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Algorithms::PolyBase::getPositionLeadLeadPoly</definition>
        <argsstring>(unsigned int i, unsigned int j, unsigned int k) const</argsstring>
        <name>getPositionLeadLeadPoly</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the k-th leader variable of the i-th leader, in the j-th feasible polyhedron.</para>
<para>Indeed it should hold that <formula id="2">$ j &lt; $</formula> Algorithms::PolyBase::getNumPolyLead(i)</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="69" column="16" bodyfile="src/algorithms/PolyBase.cpp" bodystart="73" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1aa987e6d74b441b0c61b06899e6248925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Algorithms::PolyBase::getNumPolyLead</definition>
        <argsstring>(unsigned int i) const</argsstring>
        <name>getNumPolyLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the number of polyhedra used in the inner approximation of the feasible region of the i-th leader.*</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="72" column="16" bodyfile="src/algorithms/PolyBase.cpp" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_poly_base_1a53fd963bfa11b12f7bd6a445dc0caf63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Algorithms::PolyBase::getPositionProbab</definition>
        <argsstring>(unsigned int i, unsigned int k) const</argsstring>
        <name>getPositionProbab</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the probability associated with the k-th polyhedron (k-th pure strategy) of the i-th leader. However, if the leader has an inner approximation with exactly 1 polyhedron, it returns 0;</para>
        </inbodydescription>
        <location file="include/algorithms/polybase.h" line="74" column="16" bodyfile="src/algorithms/PolyBase.cpp" bodystart="98" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Algorithms::PolyBase</label>
        <link refid="class_algorithms_1_1_poly_base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Algorithms::InnerApproximation</label>
        <link refid="class_algorithms_1_1_inner_approximation"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Algorithms::FullEnumeration</label>
        <link refid="class_algorithms_1_1_full_enumeration"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Algorithms::Algorithm</label>
        <link refid="class_algorithms_1_1_algorithm"/>
      </node>
      <node id="3">
        <label>Algorithms::CombinatorialPNE</label>
        <link refid="class_algorithms_1_1_combinatorial_p_n_e"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Algorithms::PolyBase</label>
        <link refid="class_algorithms_1_1_poly_base"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Game::EPECStatistics</label>
        <link refid="struct_game_1_1_e_p_e_c_statistics"/>
        <childnode refid="5" relation="usage">
          <edgelabel>AlgorithmParam</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Game::EPECAlgorithmParams</label>
        <link refid="struct_game_1_1_e_p_e_c_algorithm_params"/>
      </node>
      <node id="3">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
        <childnode refid="4" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Algorithms::Algorithm</label>
        <link refid="class_algorithms_1_1_algorithm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>EPECObject</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/algorithms/polybase.h" line="7" column="32" bodyfile="include/algorithms/polybase.h" bodystart="7" bodyend="75"/>
    <listofallmembers>
      <member refid="class_algorithms_1_1_algorithm_1a6dcf349b10b8a08d7c54b4df3e599264" prot="protected" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>Env</name></member>
      <member refid="class_algorithms_1_1_algorithm_1afaa849a6223a6abd701d4715cc55708c" prot="protected" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>EPECObject</name></member>
      <member refid="class_algorithms_1_1_poly_base_1aa987e6d74b441b0c61b06899e6248925" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getNumPolyLead</name></member>
      <member refid="class_algorithms_1_1_poly_base_1ae334c85da0d64e0c8b8471f2233dd449" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getPositionLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_poly_base_1af721963dcce33b7acbeaee904c485116" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getPositionLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a53fd963bfa11b12f7bd6a445dc0caf63" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getPositionProbab</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a86c4dde773b300f57f9968c7250d0f8e" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getValLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_poly_base_1ac3c83ac88bf7bd84238781bbf1be68c3" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getValLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_poly_base_1aa9ef9760237673271aa3dd174992f4ac" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>getValProbab</name></member>
      <member refid="class_algorithms_1_1_poly_base_1aa09f61d5c01cbeaaf02471e2182134ca" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a7bf62bee2c06bc6b3de5f4a1bbacf716" prot="public" virt="virtual"><scope>Algorithms::PolyBase</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a7b1d145bcea0de98ae44efc2c75c2939" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_poly_base_1ac27d78674528f933621deccc71f66501" prot="public" virt="virtual"><scope>Algorithms::PolyBase</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_poly_base_1abe79ddc6a7707a82b399b75b102c2331" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>makeThePureLCP</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a08033828621a4e73c37c2041e029614d" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>mixedStrategyPoly</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a1f78be58a2d6bb79a68d493a14912c2b" prot="public" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>PolyBase</name></member>
      <member refid="class_algorithms_1_1_poly_base_1afddd2b644ad54f462303315088234600" prot="protected" virt="non-virtual"><scope>Algorithms::PolyBase</scope><name>PolyLCP</name></member>
      <member refid="class_algorithms_1_1_poly_base_1a66e196274f52293e5d442a3c1e44220e" prot="protected" virt="virtual"><scope>Algorithms::PolyBase</scope><name>postSolving</name></member>
      <member refid="class_algorithms_1_1_algorithm_1af1b96485ef86b1004228ffdfe6adaedf" prot="public" virt="pure-virtual"><scope>Algorithms::PolyBase</scope><name>solve</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
