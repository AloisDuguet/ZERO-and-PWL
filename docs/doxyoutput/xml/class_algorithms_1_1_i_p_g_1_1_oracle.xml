<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_algorithms_1_1_i_p_g_1_1_oracle" kind="class" language="C++" prot="public">
    <compoundname>Algorithms::IPG::Oracle</compoundname>
    <basecompoundref refid="class_algorithms_1_1_i_p_g_1_1_algorithm" prot="public" virt="non-virtual">Algorithms::IPG::Algorithm</basecompoundref>
    <includes refid="ipg__oracle_8h" local="no">ipg_oracle.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_algorithms_1_1_i_p_g_1_1_oracle_1aa3f3390c9842014a9bba5f4d0060b004" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_algorithms_1_1_i_p_g_1_1_i_p_g___player" kindref="compound">IPG_Player</ref> &gt;</type>
        <definition>std::vector&lt;IPG_Player&gt; Algorithms::IPG::Oracle::Players</definition>
        <argsstring></argsstring>
        <name>Players</name>
        <briefdescription>
<para>The support structures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="86" column="13" bodyfile="include/games/algorithms/IPG/ipg_oracle.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_algorithms_1_1_i_p_g_1_1_oracle_1ad14dbf2e3fe53a8a7ce0a4fb555e0714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Game::IPG</definition>
        <argsstring></argsstring>
        <name>Game::IPG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="109" column="1" bodyfile="include/games/algorithms/IPG/ipg_oracle.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1aaecad506e4669fe8a442470d4140991f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::addConstraintsToPool</definition>
        <argsstring>(const arma::sp_mat A, const arma::vec b, const unsigned int player, bool check=true)</argsstring>
        <name>addConstraintsToPool</name>
        <param>
          <type>const arma::sp_mat</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const arma::vec</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="87" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a15f8a07f595766be374f5b19ce100727" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::IPG::Oracle::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This method initializes some fields for the algorithm. Also, it warm starts the initial strategies to pure best reponses.</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="91" column="25" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="483" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a3100d6edc24930a27619934911ce50c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Algorithms::IPG::Oracle::buildXminusI</definition>
        <argsstring>(const unsigned int i)</argsstring>
        <name>buildXminusI</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the player id <computeroutput>i</computeroutput>, builds the vector x^{-i} from the current working strategies.</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="92" column="25" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="538" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a743b09cfa2823edee22e9aae62c5907d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::addValueCut</definition>
        <argsstring>(unsigned int player, arma::vec xOfIBestResponse, arma::vec xMinusI, bool check=true)</argsstring>
        <name>addValueCut</name>
        <param>
          <type>unsigned int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>xOfIBestResponse</declname>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>xMinusI</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given a player <computeroutput>player</computeroutput>, one of its best responses <computeroutput>xOfIBestResponses</computeroutput>, the strategies of the other players <computeroutput>xMinusI</computeroutput>, it adds an inequality of the type <formula id="9">\[ f^i(x^i, &amp;\bar&amp; x^{-i}) \geq f^i(\hat x^i, \bar x^{-i})\]</formula> to the cut pool of that player. <computeroutput>checkDuplicate</computeroutput> controls whether the methods search for duplicate inequalities in the pool.</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="93" column="25" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="94" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a3f3bc1854c42d87e6b83c2e61acab342" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::separationOracle</definition>
        <argsstring>(const unsigned int player)</argsstring>
        <name>separationOracle</name>
        <param>
          <type>const unsigned int</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the player id <computeroutput>player</computeroutput>, checks whether the current strategy is feasible or not. In order to do so, a more complex separation technique may be called.</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="97" column="25" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="180" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1ad1f3c6ace031f0dfcf588421ecdd7050" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::computeStrategy</definition>
        <argsstring>(const unsigned int i, arma::vec &amp;strategy, double &amp;payoff)</argsstring>
        <name>computeStrategy</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
          <briefdescription><para>The player id </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>strategy</declname>
          <briefdescription><para>The computed strategy </para>
</briefdescription>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>payoff</declname>
          <briefdescription><para>The payoff </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the <computeroutput>i</computeroutput> as the id of the player, retrieves the relaxation of the integer problem of that player and solves it to find any mixed strategies. The resulting strategy is pushed into <computeroutput>strategy</computeroutput>. In general, the result might not be feasible. In other words, the solution may be outside the mixed-integer convex hull. To check whether this is true or not, ask to the separationOracle. The computed strategy is pushed into an <ref refid="class_algorithms_1_1_i_p_g_1_1_i_p_g___player" kindref="compound">IPG_Player</ref> object in the field Players of this class. <simplesect kind="return"><para>true if the i-th player problem is feasible</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="98" column="6" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="439" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a00d4bf43f954bb0c20b5a9facdd85f8a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::IPG::Oracle::updateMembership</definition>
        <argsstring>(const unsigned int &amp;player, const arma::vec &amp;vertex, bool normalization)</argsstring>
        <name>updateMembership</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalization</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Updates the membership LP in the Player vector for the <computeroutput>player</computeroutput>, the point <computeroutput>xOfI</computeroutput>, and <computeroutput>normalization</computeroutput> </para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="101" column="1" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="422" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1adcb941e5b55a8ee41b1fa1b9378e3005" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::membershipSeparation</definition>
        <argsstring>(const unsigned int player, const unsigned int iterations, const arma::vec &amp;xOfI, const arma::vec &amp;xMinusI)</argsstring>
        <name>membershipSeparation</name>
        <param>
          <type>const unsigned int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>xOfI</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>xMinusI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the player and a bound on the number of iterations, tries to decide whether the given strategy belongs to the feasible region of the player by building the convex-hull with the known rays and vertices. <simplesect kind="return"><para>true if the point belongs to the feasible region. <computeroutput>xOfI</computeroutput> is the given point to separate.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="103" column="6" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="255" bodyend="420"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a4e0a7a531afabba100b286af02b70221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Algorithms::IPG::Oracle::Oracle</definition>
        <argsstring>(GRBEnv *env, Game::IPG *IPGObj)</argsstring>
        <name>Oracle</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="class_game_1_1_i_p_g" kindref="compound">Game::IPG</ref> *</type>
          <declname>IPGObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="111" column="1" bodyfile="include/games/algorithms/IPG/ipg_oracle.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1ab3fd0b8a91fda4a9b1f75fb890ed9dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Algorithms::IPG::Oracle::solve</definition>
        <argsstring>()</argsstring>
        <name>solve</name>
        <reimplements refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a22cc835ab46ad965dc6c92dd34c5be41">solve</reimplements>
        <briefdescription>
<para>A method to solve the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Solves the <ref refid="namespace_algorithms_1_1_i_p_g" kindref="compound">IPG</ref> with the <ref refid="class_algorithms_1_1_i_p_g_1_1_oracle" kindref="compound">Oracle</ref> algorithm.</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="113" column="6" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="116" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a7b65df4f88ad56ce0ff025afbabeae79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::isSolved</definition>
        <argsstring>() const</argsstring>
        <name>isSolved</name>
        <reimplements refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1ab36d94d4206b3099ab32158b3dbdf33c">isSolved</reimplements>
        <briefdescription>
<para>A method to check whether the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> is solved or not, given a numerical tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="115" column="6" bodyfile="include/games/algorithms/IPG/ipg_oracle.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_i_p_g_1_1_oracle_1a6fa92345c24a912a81586c7fea09b4dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Algorithms::IPG::Oracle::isPureStrategy</definition>
        <argsstring>() const</argsstring>
        <name>isPureStrategy</name>
        <reimplements refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7e8e3622436e6a7a4c499a72b5c41ffe">isPureStrategy</reimplements>
        <briefdescription>
<para>A method to check whether the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> solution is a pure equilibrium or not, given a numerical tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns true if all players are playing a pure strategy in a Nash Equilibrium</para>
        </inbodydescription>
        <location file="include/games/algorithms/IPG/ipg_oracle.h" line="117" column="6" bodyfile="src/games/algorithms/IPG/ipg_oracle.cpp" bodystart="245" bodyend="253"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is responsible for the <ref refid="class_algorithms_1_1_i_p_g_1_1_oracle" kindref="compound">Oracle</ref> algorithm for <ref refid="namespace_algorithms_1_1_i_p_g" kindref="compound">IPG</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Algorithms::IPG::Oracle</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_oracle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Algorithms::IPG::Algorithm</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_algorithm"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="13">
        <label>Attr&lt; ZEROStatus &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="10">
        <label>Attr&lt; int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="1">
        <label>Algorithms::IPG::Oracle</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_oracle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Attr&lt; Data::IPG::Algorithms &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="5">
        <label>ZEROStatistics&lt; Data::IPG::DataObject &gt;</label>
        <link refid="struct_z_e_r_o_statistics"/>
        <childnode refid="6" relation="usage">
          <edgelabel>WallClockTime</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>AlgorithmData</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>NumConstraints</edgelabel>
          <edgelabel>NumNonZero</edgelabel>
          <edgelabel>NumIterations</edgelabel>
          <edgelabel>NumVar</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>NumericalIssues</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>Status</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Game::IPG</label>
        <link refid="class_game_1_1_i_p_g"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Data::IPG::DataObject</label>
        <link refid="class_data_1_1_i_p_g_1_1_data_object"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>Algorithm</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>Attr&lt; bool &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="4">
        <label>Game::AbstractGame&lt; Data::IPG::DataObject &gt;</label>
        <link refid="class_game_1_1_abstract_game"/>
        <childnode refid="5" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Algorithms::IPG::Algorithm</label>
        <link refid="class_algorithms_1_1_i_p_g_1_1_algorithm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>IPG</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Attr&lt; double &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="8">
        <label>ZEROAlgorithmData</label>
        <link refid="class_z_e_r_o_algorithm_data"/>
        <childnode refid="6" relation="usage">
          <edgelabel>DeviationTolerance</edgelabel>
          <edgelabel>TimeLimit</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>RandomSeed</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>Threads</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>IndicatorConstraints</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>Attr&lt; unsigned long int &gt;</label>
        <link refid="class_attr"/>
      </node>
    </collaborationgraph>
    <location file="include/games/algorithms/IPG/ipg_oracle.h" line="84" column="31" bodyfile="include/games/algorithms/IPG/ipg_oracle.h" bodystart="84" bodyend="118"/>
    <listofallmembers>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1aaecad506e4669fe8a442470d4140991f" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>addConstraintsToPool</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a743b09cfa2823edee22e9aae62c5907d" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>addValueCut</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1aa874865ba1f03bc7bad0f768889085ea" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Algorithm</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a3100d6edc24930a27619934911ce50c9" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>buildXminusI</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1ad1f3c6ace031f0dfcf588421ecdd7050" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>computeStrategy</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1abab001b5624574eb693522338601547e" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Env</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1ad14dbf2e3fe53a8a7ce0a4fb555e0714" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Game::IPG</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2ebafd05ba2ad887c5f17a7aa02c857c" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>getTol</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a7b13566b24556f5bbbf8d9988c1d3112" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Infeasible</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a15f8a07f595766be374f5b19ce100727" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>initialize</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a40fd8d23d5b7378a844f2a8f2eb7c5e7" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>IPG</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a6fa92345c24a912a81586c7fea09b4dd" prot="public" virt="virtual"><scope>Algorithms::IPG::Oracle</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a7b65df4f88ad56ce0ff025afbabeae79" prot="public" virt="virtual"><scope>Algorithms::IPG::Oracle</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1adcb941e5b55a8ee41b1fa1b9378e3005" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>membershipSeparation</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a4e0a7a531afabba100b286af02b70221" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Oracle</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1aa3f3390c9842014a9bba5f4d0060b004" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Players</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1ac9f81f880503bc0b4ec00e28bbd18052" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Pure</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a3f3bc1854c42d87e6b83c2e61acab342" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>separationOracle</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a33a58e32c58669adf927ffa3d14c5c4b" prot="public" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>setTol</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1ab3fd0b8a91fda4a9b1f75fb890ed9dd7" prot="public" virt="virtual"><scope>Algorithms::IPG::Oracle</scope><name>solve</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1a2879b27d2e02bb11f9a25e66768a2952" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Solved</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_algorithm_1afd2fddfa89835af78760431d69746d27" prot="protected" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>Tolerance</name></member>
      <member refid="class_algorithms_1_1_i_p_g_1_1_oracle_1a00d4bf43f954bb0c20b5a9facdd85f8a" prot="private" virt="non-virtual"><scope>Algorithms::IPG::Oracle</scope><name>updateMembership</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
