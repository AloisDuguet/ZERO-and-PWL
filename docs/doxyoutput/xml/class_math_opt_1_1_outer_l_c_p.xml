<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_math_opt_1_1_outer_l_c_p" kind="class" language="C++" prot="public">
    <compoundname>MathOpt::OuterLCP</compoundname>
    <basecompoundref refid="class_math_opt_1_1_l_c_p" prot="public" virt="non-virtual">MathOpt::LCP</basecompoundref>
    <includes refid="outer__lcp_8h" local="no">outer_lcp.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_math_opt_1_1_outer_l_c_p_1a9c5696dd783d06c1b3e8adda6350d832" prot="private" static="no" mutable="no">
        <type>std::set&lt; unsigned long int &gt;</type>
        <definition>std::set&lt;unsigned long int&gt; MathOpt::OuterLCP::Approximation</definition>
        <argsstring></argsstring>
        <name>Approximation</name>
        <initializer>=
		  {}</initializer>
        <briefdescription>
<para>Analogous to <ref refid="class_math_opt_1_1_poly_l_c_p_1a41bf2044b6ad68197af7e99828272b65" kindref="member">MathOpt::PolyLCP::AllPolyhedra</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Decimal encoding of polyhedra that have been enumerated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="57" column="11" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_math_opt_1_1_outer_l_c_p_1ad7b8f927dd37a21500c0126db1892889" prot="private" static="no" mutable="no">
        <type>std::set&lt; unsigned long int &gt;</type>
        <definition>std::set&lt;unsigned long int&gt; MathOpt::OuterLCP::FeasibleComponents</definition>
        <argsstring></argsstring>
        <name>FeasibleComponents</name>
        <initializer>=
		  {}</initializer>
        <briefdescription>
<para>Decimal encoding of polyhedra that have been enumerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="60" column="11" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_math_opt_1_1_outer_l_c_p_1aa3ee14aee58bd6659864b73089e429f5" prot="private" static="no" mutable="no">
        <type>std::set&lt; unsigned long int &gt;</type>
        <definition>std::set&lt;unsigned long int&gt; MathOpt::OuterLCP::InfeasibleComponents</definition>
        <argsstring></argsstring>
        <name>InfeasibleComponents</name>
        <initializer>=
		  {}</initializer>
        <briefdescription>
<para>Decimal encoding of polyhedra known to be infeasible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="62" column="11" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_math_opt_1_1_outer_l_c_p_1a5571e20c414ce55e14a55ee4c590be9d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MathOpt::OuterLCP::feasApprox</definition>
        <argsstring></argsstring>
        <name>feasApprox</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="68" column="7" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a41bf3e2f0eedfc3c69425c718ad934e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MathOpt::OuterLCP::OuterLCP</definition>
        <argsstring>(GRBEnv *env, const Game::NashGame &amp;N)</argsstring>
        <name>OuterLCP</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const <ref refid="class_game_1_1_nash_game" kindref="compound">Game::NashGame</ref> &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Inheritor Class to handle the outer approximation of the <ref refid="class_math_opt_1_1_l_c_p" kindref="compound">LCP</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="32" column="2" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a4c84086c989477404d13a9fdd272c90e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MathOpt::OuterLCP::clearApproximation</definition>
        <argsstring>()</argsstring>
        <name>clearApproximation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="38" column="7" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a3a0e1b8b756f03a5ecc519006f6a540a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MathOpt::OuterLCP::checkComponentFeas</definition>
        <argsstring>(const std::vector&lt; short int &gt; &amp;encoding)</argsstring>
        <name>checkComponentFeas</name>
        <param>
          <type>const std::vector&lt; short int &gt; &amp;</type>
          <declname>encoding</declname>
          <briefdescription><para>An encoding with -1/0/+1 whose feasibility has to be checked </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Checks the feasibility of a given encoding&apos;s polyhedron @detail First, checks if this polyhedra is already known to be infeasible. Then, checks if it is already known to be feasible. Finally it checks, if a parent polyhedron, i.e., a polyhedron with fewer variables/equations fixed is already infeasible. If none of those give the required details, solves a linear program to check feasibility.</para>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="45" column="7" bodyfile="src/mathopt/lcp/outer_lcp.cpp" bodystart="155" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1af65666a72ac63d22eb132c9c4b90077a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MathOpt::OuterLCP::outerApproximate</definition>
        <argsstring>(std::vector&lt; bool &gt; encoding, bool clear=true)</argsstring>
        <name>outerApproximate</name>
        <param>
          <type>std::vector&lt; bool &gt;</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="47" column="7" bodyfile="src/mathopt/lcp/outer_lcp.cpp" bodystart="17" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1ab39b555e7623b81f27f832671202ce48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MathOpt::OuterLCP::addComponent</definition>
        <argsstring>(std::vector&lt; short int &gt; encoding, bool checkFeas, bool custom=false, spmat_Vec *custAi={}, vec_Vec *custbi={})</argsstring>
        <name>addComponent</name>
        <param>
          <type>std::vector&lt; short int &gt;</type>
          <declname>encoding</declname>
          <briefdescription><para>A vector of +1,-1 and 0 referring to which equations and variables are taking 0 value. +1 means equation set to zero, -1 variable, and zero none of the two </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>checkFeas</declname>
          <briefdescription><para>The component is added after ensuring feasibility, if this is true </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
          <defval>false</defval>
          <briefdescription><para>Should the components be pushed into a custom vector of polyhedra as opposed to <ref refid="class_math_opt_1_1_l_c_p_1af19b7809bfaf15311371d9a7ce3b9a9e" kindref="member">OuterLCP::Ai</ref> and <ref refid="class_math_opt_1_1_l_c_p_1a5b68d054b67aab64a123395ec12f4ba8" kindref="member">OuterLCP::bi</ref> </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="zero_8h_1a47898f11e7a4b7433acbc77588a0dc03" kindref="member">spmat_Vec</ref> *</type>
          <declname>custAi</declname>
          <defval>{}</defval>
          <briefdescription><para>If custom polyhedra vector is used, pointer to the LHS matrix </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="zero_8h_1a8d8c882d060c4d307810fdf04a6314c6" kindref="member">vec_Vec</ref> *</type>
          <declname>custbi</declname>
          <defval>{}</defval>
          <briefdescription><para>If custom polyhedra vector is used, pointer to the RHS vector Given an encoding with +1, -1 and 0s optionally checks its feasibility, and adds the appropriate polyhedron for outer approximation to <ref refid="class_math_opt_1_1_l_c_p_1af19b7809bfaf15311371d9a7ce3b9a9e" kindref="member">MathOpt::OuterLCP::Ai</ref> and <ref refid="class_math_opt_1_1_l_c_p_1a5b68d054b67aab64a123395ec12f4ba8" kindref="member">MathOpt::OuterLCP::bi</ref> (or <computeroutput>custAi</computeroutput> and <computeroutput>custbi</computeroutput>).</para>
<para>As a note to remember, 0 means, no branching is done on the said complementarity condition. </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="49" column="20" bodyfile="src/mathopt/lcp/outer_lcp.cpp" bodystart="74" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a64d698dbc4e46c6431e6a7ed363357a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool MathOpt::OuterLCP::getFeasApprox</definition>
        <argsstring>()</argsstring>
        <name>getFeasApprox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="54" column="20" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a90ae9a06c71be14c6db2ad63c82fa966" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MathOpt::OuterLCP::isParent</definition>
        <argsstring>(const std::vector&lt; short &gt; &amp;father, const std::vector&lt; short &gt; &amp;child)</argsstring>
        <name>isParent</name>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>father</declname>
        </param>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="64" column="7" bodyfile="src/mathopt/lcp/outer_lcp.cpp" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_math_opt_1_1_outer_l_c_p_1a1fb71486c866dde33188d593abb5faa9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MathOpt::OuterLCP::addChildComponents</definition>
        <argsstring>(const std::vector&lt; short &gt; encoding)</argsstring>
        <name>addChildComponents</name>
        <param>
          <type>const std::vector&lt; short &gt;</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>- Each element is either 0, 1, -1 or 2 in this std::vector of size equal to <ref refid="class_math_opt_1_1_l_c_p_1a07fa9bee7040e1e5103a3933dec33b9f" kindref="member">MathOpt::OuterLCP::nR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
0 implies it is an unprocessed complementarity condition, and don&apos;t process it now. +1/-1 implies it is a processed complementarity condition, nothing more has to be done. 2 implies it is an unprocessed complementarity condition and process it now.</para>
<para>So, if given an input, which has 2s, adds the polyhedra corresponding to those parameters which were set to 2 into +1 and -1 now. So, if there are k 2s in the input, this will add <formula id="23">$2^k$</formula> polyhedra by calling <ref refid="class_math_opt_1_1_outer_l_c_p_1ab39b555e7623b81f27f832671202ce48" kindref="member">MathOpt::OuterLCP::addComponent</ref>.</para>
        </inbodydescription>
        <location file="include/mathopt/lcp/outer_lcp.h" line="66" column="7" bodyfile="src/mathopt/lcp/outer_lcp.cpp" bodystart="38" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>MathOpt::LCP</label>
        <link refid="class_math_opt_1_1_l_c_p"/>
      </node>
      <node id="1">
        <label>MathOpt::OuterLCP</label>
        <link refid="class_math_opt_1_1_outer_l_c_p"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>MathOpt::LCP</label>
        <link refid="class_math_opt_1_1_l_c_p"/>
      </node>
      <node id="1">
        <label>MathOpt::OuterLCP</label>
        <link refid="class_math_opt_1_1_outer_l_c_p"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/mathopt/lcp/outer_lcp.h" line="26" column="28" bodyfile="include/mathopt/lcp/outer_lcp.h" bodystart="26" bodyend="69"/>
    <listofallmembers>
      <member refid="class_math_opt_1_1_l_c_p_1ab0e3f41a96438e66929d6d1846d81cd3" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>_A</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ac2b4526135fb3ac4f70c6ee5f7b4cf65" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>_Acut</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a6d68d41581d8d52c72fc0e078d11cd4d" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>_b</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a086d7e92afd51302f70f2288ade6f512" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>_bcut</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a1fb71486c866dde33188d593abb5faa9" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>addChildComponents</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1ab39b555e7623b81f27f832671202ce48" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>addComponent</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1abb3d2bcb70270704f7b96cd406d681e2" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>addCustomCuts</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1af19b7809bfaf15311371d9a7ce3b9a9e" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>Ai</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a9c5696dd783d06c1b3e8adda6350d832" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>Approximation</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a5b68d054b67aab64a123395ec12f4ba8" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>bi</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a0919c037468073eacc198bc6dcc2363f" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>BigM</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a3a0e1b8b756f03a5ecc519006f6a540a" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>checkComponentFeas</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a4c84086c989477404d13a9fdd272c90e" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>clearApproximation</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a1d50200c05752a28083272b4a5b124fc" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>Compl</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a824d162366e30bcb729ede444f51af71" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>containCut</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a0b54da5cf1c56c79ae2addf5742aea81" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>convexHull</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a8e481dfd12ac9d6090370e8d15e80c2f" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>defConst</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1addeb38537d9e7cf4223fd2ba33bf72dc" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>Env</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a59bf18d06c235e380dc2f3a6f1419ab5" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>Eps</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a424a4d9eb7509a97d9cf4b800d957cb0" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>EpsInt</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ab73a1b2e9b4343a90974e0d07922541b" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>errorCheck</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a21b65610e8c23cbfb018d8d61ad2aa30" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>extractSols</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a5571e20c414ce55e14a55ee4c590be9d" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>feasApprox</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1ad7b8f927dd37a21500c0126db1892889" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>FeasibleComponents</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a5f0cfd505da46652224d6ddf80b28a0d" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getCompl</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a64d698dbc4e46c6431e6a7ed363357a3" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getFeasApprox</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a8e98d36e2af38da1b66013be86b4b856" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getLEnd</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ab29d11d93c2bf1eead879847370fb9bd" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getLStart</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a964119e24dee54beaacfe6bb9d5db829" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getM</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a1d76692175585da4d03037d65a79a6d1" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getMstar</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a6d1d8b31629fd893b90b5e246db85b65" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getNumberLeader</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ae30ffe7036c4bfd6d20cb400dd004b3d" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getNumCols</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a3594c0c215a8fc483f0f611574ced3dd" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getNumRows</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a6344bfaefa0cba43e2c6cd0293dfb710" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getq</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a4b84d3c1a933d5fb208494f1097da4c3" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>getqstar</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1aa3ee14aee58bd6659864b73089e429f5" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>InfeasibleComponents</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a90ae9a06c71be14c6db2ad63c82fa966" prot="private" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>isParent</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a42175395b990e8069a18963fc2666b4c" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>isZero</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a3c5956541410e906ce7d5c1ad844ba3e" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ae15300807444d65f55acf76e632431b1" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1aeae3c06657dd721a859f42ef06352645" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ad7a5f1af658e2be2c4a0f24000f184c7" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1abc0c893675e33ccab28c3f3659faaf42" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ac554a16ac9497952c31b3f84d68662ff" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCPasMIP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ae6cc1d9683368334cc4df920b95402af" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCPasMIP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1aa317c31cd870d32811b704fe6437a125" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCPasMIP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1adb271830c46c32ab236961199edde62b" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LCPasQP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a12e4cee5104b8155fdaf499701fb36fb" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LeadEnd</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ab74625ec0c212d9d3c40ad8870741515" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>LeadStart</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a71496aeafa52792d00211240f51aa5ce" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>load</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a4e0d245b9c77ff47fc160df5edcfe3b5" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>M</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ab6a55bca1cd889aa17ef14f5301a70bc" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>MadeRlxdModel</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a59993bce1206d9d5dfa04c616ea572e6" prot="public" virt="virtual"><scope>MathOpt::OuterLCP</scope><name>makeQP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ac5d12cc6265d68850db41c47e69b7c4b" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>makeRelaxed</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a9aef94716ce8262f55ee7c49d4398f74" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>MPECasMILP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ac5053d434e646ec85b9d276aedee5bcd" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>MPECasMIQP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a39957fb3b0729294ea8ec7a71465a22e" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>nC</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a07fa9bee7040e1e5103a3933dec33b9f" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>nR</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ae64bd8eab0264253a226b482b1cdaa99" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>NumberLeader</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1af65666a72ac63d22eb132c9c4b90077a" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>outerApproximate</name></member>
      <member refid="class_math_opt_1_1_outer_l_c_p_1a41bf3e2f0eedfc3c69425c718ad934e5" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>OuterLCP</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ace92b15384c30cf9099a8b03eedb0fe0" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>print</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ad99482b12ec46aabc831b55c28b49bbe" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>q</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a0e47a3545027a6d9d26d1e3e499b24a2" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>RlxdModel</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a8bedfd755996b18fa86121ffaabb92d0" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>save</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1ad59aa4e9848f45e477e67eb1e273c9ef" prot="protected" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>solEncode</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a7136a8dfea61785975d36090ce3e6c01" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>solEncode</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a580e72a782e479fee8c4d8680ef8b87f" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>solEncode</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1adc9c91af096bffbfeb0ef91b20fc58bc" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>UseIndicators</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a6261825711653d2af9aacef1887384a2" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>write</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1a2d0f2ec3d8fa860d0db32402dbb22451" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>zFromX</name></member>
      <member refid="class_math_opt_1_1_l_c_p_1aba79835cd3e9ead070a2f2cc56da151a" prot="public" virt="non-virtual"><scope>MathOpt::OuterLCP</scope><name>~LCP</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
