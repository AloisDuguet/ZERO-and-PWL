<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation" kind="class" language="C++" prot="public">
    <compoundname>Algorithms::EPEC::InnerApproximation</compoundname>
    <basecompoundref refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base" prot="public" virt="non-virtual">Algorithms::EPEC::PolyBase</basecompoundref>
    <includes refid="epec__innerapproximation_8h" local="no">epec_innerapproximation.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a0ec6b37ef38785eb514d295bb3ce3281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Algorithms::EPEC::InnerApproximation::InnerApproximation</definition>
        <argsstring>(GRBEnv *env, Game::EPEC *EPECObject)</argsstring>
        <name>InnerApproximation</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> *</type>
          <declname>EPECObject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="30" column="1" bodyfile="include/games/algorithms/EPEC/epec_innerapproximation.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a3f57f11002bbe86fe0b002eb155d26f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Algorithms::EPEC::InnerApproximation::solve</definition>
        <argsstring>()</argsstring>
        <name>solve</name>
        <reimplements refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1afb53fa0b28accf7ffb71f38b7127cd8a">solve</reimplements>
        <briefdescription>
<para>A method to solve the <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Wraps the <ref refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm" kindref="compound">Algorithm</ref> with the postSolving operations</para>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="31" column="6" bodyfile="src/games/algorithms/EPEC/epec_innerapproximation.cpp" bodystart="24" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a003f173148410c570746da4bd29e7202" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Algorithms::EPEC::InnerApproximation::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the referenced <ref refid="namespace_algorithms_1_1_e_p_e_c" kindref="compound">EPEC</ref> instance, this method solves it through the inner approximation <ref refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm" kindref="compound">Algorithm</ref>.</para>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="34" column="14" bodyfile="src/games/algorithms/EPEC/epec_innerapproximation.cpp" bodystart="32" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1ae73f1a2a080486ee9c64c49d8343fd89" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::EPEC::InnerApproximation::addRandomPoly2All</definition>
        <argsstring>(unsigned int aggressiveLevel=1, bool stopOnSingleInfeasibility=false)</argsstring>
        <name>addRandomPoly2All</name>
        <param>
          <type>unsigned int</type>
          <declname>aggressiveLevel</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>stopOnSingleInfeasibility</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a call to to Game::LCP::addAPoly for each member in <ref refid="class_game_1_1_e_p_e_c_1a5301b68b3b37d23c444784282f9c9c9c" kindref="member">Game::EPEC::PlayersLCP</ref> and tries to add a polyhedron to get a better inner approximation for the LCP. <computeroutput>aggressiveLevel</computeroutput> is the maximum number of polyhedra it will try to add to each country. Setting it to an arbitrarily high value will mimic complete enumeration.</para>
<para>If <computeroutput>stopOnSingleInfeasibility</computeroutput> is true, then the function returns false and aborts all operation as soon as it finds that it cannot add polyhedra to some country. On the other hand if <computeroutput>stopOnSingleInfeasibility</computeroutput> is false, the function returns false, only if it is not possible to add polyhedra to <emphasis>any</emphasis> of the countries. <simplesect kind="return"><para>true if successfully added the maximum possible number of polyhedra not greater than aggressiveLevel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="35" column="14" bodyfile="src/games/algorithms/EPEC/epec_innerapproximation.cpp" bodystart="177" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1aac90b8b215e9baf1fd5e41b60a96cc1c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Algorithms::EPEC::InnerApproximation::getAllDeviations</definition>
        <argsstring>(std::vector&lt; arma::vec &gt; &amp;deviations, const arma::vec &amp;guessSol, const std::vector&lt; arma::vec &gt; &amp;prevDev={}) const</argsstring>
        <name>getAllDeviations</name>
        <param>
          <type>std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>deviations</declname>
          <briefdescription><para>The vector of deviations for all players </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>guessSol</declname>
          <briefdescription><para>The guess for the solution vector </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>prevDev</declname>
          <defval>{}</defval>
          <briefdescription><para>The previous vector of deviations, if any exist. </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Given a potential solution vector, returns a profitable deviation (if it exists) for all players. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of computed deviations, which empty if at least one deviation cannot be computed <computeroutput>prevDev</computeroutput> can be empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="37" column="14" bodyfile="src/games/algorithms/EPEC/epec_innerapproximation.cpp" bodystart="213" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1afde7daf1886fefed019bb2ff135c2051" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Algorithms::EPEC::InnerApproximation::addDeviatedPolyhedron</definition>
        <argsstring>(const std::vector&lt; arma::vec &gt; &amp;deviations, bool &amp;infeasCheck) const</argsstring>
        <name>addDeviatedPolyhedron</name>
        <param>
          <type>const std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>deviations</declname>
          <briefdescription><para>devns.at(i) is a profitable deviation for the i-th country from the current this-&gt;SolutionX </para>
</briefdescription>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>infeasCheck</declname>
          <briefdescription><para>Useful for the first iteration of iterativeNash. If true, at least one player has no polyhedron that can be added. In the first iteration, this translates to x </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given a profitable deviation for each country, adds <emphasis>a</emphasis> polyhedron in the feasible region of each country to the corresponding country&apos;s Game::LCP object (this-&gt;PlayersLCP.at(i)) &apos;s vector of feasible polyhedra.</para>
<para>Naturally, this makes the inner approximation of the Game::LCP better, by including one additional polyhedron.</para>
        </inbodydescription>
        <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="40" column="14" bodyfile="src/games/algorithms/EPEC/epec_innerapproximation.cpp" bodystart="237" bodyend="275"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is responsible for the inner Approximation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Algorithms::EPEC::PolyBase</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Algorithms::EPEC::Algorithm</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm"/>
      </node>
      <node id="1">
        <label>Algorithms::EPEC::InnerApproximation</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="13">
        <label>Attr&lt; std::vector&lt; unsigned int &gt; &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="6">
        <label>ZEROStatistics&lt; Data::EPEC::DataObject &gt;</label>
        <link refid="struct_z_e_r_o_statistics"/>
        <childnode refid="7" relation="usage">
          <edgelabel>WallClockTime</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>AlgorithmData</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>NumConstraints</edgelabel>
          <edgelabel>NumNonZero</edgelabel>
          <edgelabel>NumIterations</edgelabel>
          <edgelabel>NumVar</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>NumericalIssues</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>Status</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>Attr&lt; ZEROStatus &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="11">
        <label>Attr&lt; int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="2">
        <label>Algorithms::EPEC::PolyBase</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>Attr&lt; Data::LCP::PolyhedraStrategy &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="3">
        <label>Algorithms::EPEC::Algorithm</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm"/>
        <childnode refid="4" relation="usage">
          <edgelabel>EPECObject</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>Attr&lt; Data::EPEC::Algorithms &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="12">
        <label>Attr&lt; bool &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="8">
        <label>Data::EPEC::DataObject</label>
        <link refid="class_data_1_1_e_p_e_c_1_1_data_object"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>BoundBigM</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>FeasiblePolyhedra</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>LostIntermediateEq</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>Aggressiveness</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>RecoverStrategy</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>BoundPrimals</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>Algorithm</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>PolyhedraStrategy</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Algorithms::EPEC::InnerApproximation</label>
        <link refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>Attr&lt; unsigned int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="7">
        <label>Attr&lt; double &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="9">
        <label>ZEROAlgorithmData</label>
        <link refid="class_z_e_r_o_algorithm_data"/>
        <childnode refid="7" relation="usage">
          <edgelabel>DeviationTolerance</edgelabel>
          <edgelabel>TimeLimit</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>RandomSeed</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>Threads</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>IndicatorConstraints</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Attr&lt; unsigned long int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="5">
        <label>Game::AbstractGame&lt; Data::EPEC::DataObject &gt;</label>
        <link refid="class_game_1_1_abstract_game"/>
        <childnode refid="6" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>Attr&lt; Data::EPEC::RecoverStrategy &gt;</label>
        <link refid="class_attr"/>
      </node>
    </collaborationgraph>
    <location file="include/games/algorithms/EPEC/epec_innerapproximation.h" line="27" column="42" bodyfile="include/games/algorithms/EPEC/epec_innerapproximation.h" bodystart="27" bodyend="42"/>
    <listofallmembers>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1afde7daf1886fefed019bb2ff135c2051" prot="private" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>addDeviatedPolyhedron</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1ae73f1a2a080486ee9c64c49d8343fd89" prot="private" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>addRandomPoly2All</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1aad636a41bb0353f0c632430b6fb20937" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>Env</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm_1ad46009aeb82c18d485cbba1060cd325a" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>EPECObject</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1aac90b8b215e9baf1fd5e41b60a96cc1c" prot="private" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getAllDeviations</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a0e0cfcb04c622946a00441e7460f9959" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getNumPolyLead</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a9a5a1f8d89b1049326165049b123e109" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getPositionLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a6f83e7a8d82218dcbaf6e43255d949c7" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getPositionLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ad7777a11c5b70da40af2780802b31fab" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getPositionProbab</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a9266e3d1190be52164d30b2134236f93" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getValLeadFollPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a1d7e28a9c5842d4b1fc8f9e9f4a61c71" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getValLeadLeadPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a22f4df7130fcc3ba15d904214e59114f" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>getValProbab</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a0ec6b37ef38785eb514d295bb3ce3281" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>InnerApproximation</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ac1be48a137ea071862794beba97ff02a" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1aa8a48f84931889820bd8f05e250f945b" prot="public" virt="virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>isPureStrategy</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a5943ee10262cc33bbeb18d5a902e1b90" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a291dab58d5014bc5be3477ed500c43f5" prot="public" virt="virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>isSolved</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a5631dd8fb9bd2d7aef4cd4137a905d15" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>makeThePureLCP</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ac6d224591f7862a5da5dcf3607016c92" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>mixedStrategyPoly</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1a3232baf0efbe5fe82c3168937a6a8d20" prot="public" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>PolyBase</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1af4b04767398229a7773932f5ff27f74b" prot="protected" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>PolyLCP</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_poly_base_1ae32c59d87b904dd0b6bff19a4bf954f7" prot="protected" virt="virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>postSolving</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a3f57f11002bbe86fe0b002eb155d26f9" prot="public" virt="virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>solve</name></member>
      <member refid="class_algorithms_1_1_e_p_e_c_1_1_inner_approximation_1a003f173148410c570746da4bd29e7202" prot="private" virt="non-virtual"><scope>Algorithms::EPEC::InnerApproximation</scope><name>start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
