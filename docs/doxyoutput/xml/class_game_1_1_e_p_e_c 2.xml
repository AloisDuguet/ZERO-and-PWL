<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_game_1_1_e_p_e_c" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Game::EPEC</compoundname>
    <derivedcompoundref refid="class_models_1_1_e_p_e_c" prot="public" virt="non-virtual">Models::EPEC</derivedcompoundref>
    <includes refid="games_8h" local="no">games.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ad0c30f87298df78ec8b2275fc272745f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::SizesWithoutHull</definition>
        <argsstring></argsstring>
        <name>SizesWithoutHull</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="523" column="15" bodyfile="include/games.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a1f958d036ee7569e9488f454158d9c8a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Game::LCP&gt; Game::EPEC::TheLCP</definition>
        <argsstring></argsstring>
        <name>TheLCP</name>
        <briefdescription>
<para>The <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> nash game written as an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="524" column="19" bodyfile="include/games.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt;GRBModel&gt; Game::EPEC::LCPModel</definition>
        <argsstring></argsstring>
        <name>LCPModel</name>
        <briefdescription>
<para>A Gurobi mode object of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> form of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="526" column="7" bodyfile="include/games.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ada0cf8c4cefee9d0e3f6fcd29aa4fac0" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt;GRBModel&gt; Game::EPEC::LCPModelBase</definition>
        <argsstring></argsstring>
        <name>LCPModelBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Gurobi mode object of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> form of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref>. If we are searching for a pure NE, the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> which is indifferent to pure or mixed NE is stored in this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="528" column="7" bodyfile="include/games.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1afc5252004b0a5c875fdf4517ba60fecd" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::NumVariables</definition>
        <argsstring></argsstring>
        <name>NumVariables</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="532" column="16" bodyfile="include/games.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a8e4aa5e6b5baa41c7a977b3b66cdfdf2" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::NumPlayers</definition>
        <argsstring></argsstring>
        <name>NumPlayers</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="533" column="16" bodyfile="include/games.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a487479646a902f7843ba3a8ddbe6708e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_algorithms_1_1_algorithm" kindref="compound">Algorithms::Algorithm</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Algorithms::Algorithm&gt; Game::EPEC::Algorithm</definition>
        <argsstring></argsstring>
        <name>Algorithm</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="534" column="19" bodyfile="include/games.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_nash_game" kindref="compound">Game::NashGame</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::NashGame&gt; &gt; Game::EPEC::PlayersLowerLevels</definition>
        <argsstring></argsstring>
        <name>PlayersLowerLevels</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="537" column="15" bodyfile="include/games.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ae133b3254fa8258788d60f994d1f8e9f" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::LCP&gt; &gt; Game::EPEC::PlayersLCP</definition>
        <argsstring></argsstring>
        <name>PlayersLCP</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="538" column="15" bodyfile="include/games.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Param&gt; &gt; Game::EPEC::PlayersQP</definition>
        <argsstring></argsstring>
        <name>PlayersQP</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The QP corresponding to each player. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="541" column="7" bodyfile="include/games.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Objective&gt; &gt; Game::EPEC::LeaderObjective</definition>
        <argsstring></argsstring>
        <name>LeaderObjective</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Objective of each leader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="543" column="7" bodyfile="include/games.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a08077df159307f005f5254e8f72eb5d8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Objective&gt; &gt; Game::EPEC::LeaderObjectiveConvexHull</definition>
        <argsstring></argsstring>
        <name>LeaderObjectiveConvexHull</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>convex hull computation </para>
        </briefdescription>
        <detaileddescription>
<para>Objective of each leader, given the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="545" column="7" bodyfile="include/games.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a92ad8e8ed1ff48bcd5509dcbf893c185" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_game_1_1_nash_game" kindref="compound">Game::NashGame</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Game::NashGame&gt; Game::EPEC::TheNashGame</definition>
        <argsstring></argsstring>
        <name>TheNashGame</name>
        <briefdescription>
<para>The <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> nash game. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="548" column="19" bodyfile="include/games.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a59b0ccd12c05db259bb7ca056daf453d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::LeaderLocations</definition>
        <argsstring></argsstring>
        <name>LeaderLocations</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Location of each leader </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="550" column="15" bodyfile="include/games.h" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a618f3df2c40a9d456f9ceaf00802967c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; const unsigned int * &gt;</type>
        <definition>std::vector&lt;const unsigned int *&gt; Game::EPEC::LocEnds</definition>
        <argsstring></argsstring>
        <name>LocEnds</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of variables in the current player, including any number of convex hull variables at the current moment. The used, i.e., the inheritor of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> has the responsibility to keep this correct by implementing an override of <ref refid="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" kindref="member">Game::EPEC::updateLocations</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="555" column="15" bodyfile="include/games.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1afd414e30d05368455d9a2eaa166b6bfb" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::ConvexHullVariables</definition>
        <argsstring></argsstring>
        <name>ConvexHullVariables</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="556" column="15" bodyfile="include/games.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1aacadd9d4fb3fd17d2f142db8758f1be9" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::numMCVariables</definition>
        <argsstring></argsstring>
        <name>numMCVariables</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="557" column="16" bodyfile="include/games.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a19ac846f7e3a018c47b61dc8b5089b60" prot="protected" static="no" mutable="no">
        <type>GRBEnv *</type>
        <definition>GRBEnv* Game::EPEC::Env</definition>
        <argsstring></argsstring>
        <name>Env</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="559" column="10" bodyfile="include/games.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a9e4f44f67e4a2956673398847e5db614" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::EPEC::Finalized</definition>
        <argsstring></argsstring>
        <name>Finalized</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="560" column="8" bodyfile="include/games.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a3dd72f644df2168162d60b12d0993a9d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::EPEC::NashEquilibrium</definition>
        <argsstring></argsstring>
        <name>NashEquilibrium</name>
        <initializer>{
      false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if computeNashEq returned an equilibrium. Note that this can be the equilibrium of an approximation, and not to the original game </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="561" column="8" bodyfile="include/games.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a157723e234e69a264e9ccf3dec0ec745" prot="protected" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point Game::EPEC::InitTime</definition>
        <argsstring></argsstring>
        <name>InitTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="565" column="50" bodyfile="include/games.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a827a90f6d6c14f8e6d61694f9a63f450" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_game_1_1_e_p_e_c_statistics" kindref="compound">EPECStatistics</ref></type>
        <definition>EPECStatistics Game::EPEC::Stats</definition>
        <argsstring></argsstring>
        <name>Stats</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Store run time information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="566" column="18" bodyfile="include/games.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1aa1a2f0e5df60ca00ccad7b9a8a4f1c8a" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::EPEC::SolutionZ</definition>
        <argsstring></argsstring>
        <name>SolutionZ</name>
        <briefdescription>
<para>Solution equation values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="567" column="13" bodyfile="include/games.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ac897450f8b0afb2346e872de2fbc82eb" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::EPEC::SolutionX</definition>
        <argsstring></argsstring>
        <name>SolutionX</name>
        <briefdescription>
<para>Solution variable values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="568" column="7" bodyfile="include/games.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a28201199a06ed9cd6a45c7c9cffc3442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::PolyBase</definition>
        <argsstring></argsstring>
        <name>Algorithms::PolyBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="610" column="3" bodyfile="include/games.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a908144402c17832c8af5763dfa36ba48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::InnerApproximation</definition>
        <argsstring></argsstring>
        <name>Algorithms::InnerApproximation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="612" column="3" bodyfile="include/games.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a0366cd2f59c7bda792ec8a4c5a092317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::OuterApproximation</definition>
        <argsstring></argsstring>
        <name>Algorithms::OuterApproximation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="614" column="3" bodyfile="include/games.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a44680bee32d9e475fc8943b3d41e0c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::CombinatorialPNE</definition>
        <argsstring></argsstring>
        <name>Algorithms::CombinatorialPNE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="616" column="3" bodyfile="include/games.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1ad56f336a443b6cbf7b6122695a760b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::FullEnumeration</definition>
        <argsstring></argsstring>
        <name>Algorithms::FullEnumeration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="618" column="3" bodyfile="include/games.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::warmstart</definition>
        <argsstring>(arma::vec x)</argsstring>
        <name>warmstart</name>
        <param>
          <type>arma::vec</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Warmstarts <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> with a solution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para><ref refid="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" kindref="member">Game::EPEC::warmstart</ref> - to complete implementation? </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="include/games.h" line="569" column="8" bodyfile="src/Games.cpp" bodystart="2039" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a2323518f6af325c254eaad444cea1317" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>(GRBEnv *env)</argsstring>
        <name>EPEC</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="588" column="3" bodyfile="include/games.h" bodystart="588" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a2ee93319f7d964f4c5df850bcf27504e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::makeObjectivePlayer</definition>
        <argsstring>(const unsigned int i, Game::QP_Objective &amp;QP_obj)=0</argsstring>
        <name>makeObjectivePlayer</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a189ce1f5b375df11455f428a40738039">makeObjectivePlayer</reimplementedby>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &amp;</type>
          <declname>QP_obj</declname>
        </param>
        <briefdescription>
<para>Can be instantiated by a derived class only! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="592" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Game::EPEC::preFinalize</definition>
        <argsstring>()</argsstring>
        <name>preFinalize</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1aa9dacf6f8965a70a18d47e196cb6f03f">preFinalize</reimplementedby>
        <briefdescription>
<para>Empty function - optionally reimplementable in derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be optionally implemented by the derived class. Code in this class will be run <emphasis>before</emphasis> calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="596" column="16" bodyfile="src/Games.cpp" bodystart="1516" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Game::EPEC::postFinalize</definition>
        <argsstring>()</argsstring>
        <name>postFinalize</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a2e38c1ac580d46b2a0bdaa36a8d46e63">postFinalize</reimplementedby>
        <briefdescription>
<para>Empty function - optionally reimplementable in derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be optionally implemented by the derived class. Code in this class will be run <emphasis>after</emphasis> calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="598" column="16" bodyfile="src/Games.cpp" bodystart="1525" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::updateLocations</definition>
        <argsstring>()=0</argsstring>
        <name>updateLocations</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1adb4f3499fa2c03522ce997f0c3f63316">updateLocations</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="601" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1abd1f66626593e9f02132467bec62573c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::makeMCConstraints</definition>
        <argsstring>(arma::sp_mat &amp;MC, arma::vec &amp;RHS) const</argsstring>
        <name>makeMCConstraints</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a92ed1b673ace45b835bc07cc9b30e6ea">makeMCConstraints</reimplementedby>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>MC</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="603" column="16" bodyfile="include/games.h" bodystart="603" bodyend="606"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::addDummyLead</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>addDummyLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
          <briefdescription><para>The leader to whom dummy variables should be added </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Add Dummy variables for the leaders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Adds dummy variables to the leader of an <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> - useful after computing the convex hull.</para>
        </inbodydescription>
        <location file="include/games.h" line="572" column="8" bodyfile="src/Games.cpp" bodystart="1600" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void</type>
        <definition>const void Game::EPEC::makePlayerQP</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>makePlayerQP</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Makes the <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> corresponding to the <computeroutput>i-th</computeroutput> country. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>First gets the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> object from <computeroutput><ref refid="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" kindref="member">Game::EPEC::PlayersLowerLevels</ref></computeroutput> and makes a <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> with this <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as the lower level</para>
</listitem><listitem><para>This is achieved by calling <ref refid="class_game_1_1_l_c_p_1ad40426b0333d8502982333317c8c52ea" kindref="member">LCP::makeQP</ref> and using the objective value object in <computeroutput><ref refid="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" kindref="member">Game::EPEC::LeaderObjective</ref></computeroutput> </para>
</listitem><listitem><para>Finally the locations are updated owing to the complete convex hull calculated during the call to <ref refid="class_game_1_1_l_c_p_1ad40426b0333d8502982333317c8c52ea" kindref="member">LCP::makeQP</ref> <simplesect kind="note"><para>Overloaded as <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">Models::EPEC::makePlayerQP()</ref> </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="573" column="14" bodyfile="src/Games.cpp" bodystart="1820" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a5db4c964c3d451ab55a5630e565753d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::makePlayersQPs</definition>
        <argsstring>()</argsstring>
        <name>makePlayersQPs</name>
        <briefdescription>
<para>Makes the <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> for all the countries. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls are made to <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">Models::EPEC::makePlayerQP(const unsigned int i)</ref> for each valid <computeroutput>i</computeroutput> <simplesect kind="note"><para>Overloaded as <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">EPEC::makePlayerQP(unsigned int)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="575" column="8" bodyfile="src/Games.cpp" bodystart="1852" bodyend="1913"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a4d84d3af33242733ec32b89f91d49158" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::makeTheLCP</definition>
        <argsstring>()</argsstring>
        <name>makeTheLCP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="577" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::computeLeaderLocations</definition>
        <argsstring>(unsigned int addSpaceForMC=0)</argsstring>
        <name>computeLeaderLocations</name>
        <param>
          <type>unsigned int</type>
          <declname>addSpaceForMC</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="579" column="8" bodyfile="src/Games.cpp" bodystart="1634" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a03f5dc3947750c69b9c3bfdf675ab394" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXMinusI</definition>
        <argsstring>(const arma::vec &amp;x, const unsigned int &amp;i, arma::vec &amp;solOther) const</argsstring>
        <name>getXMinusI</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>solOther</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="581" column="8" bodyfile="src/Games.cpp" bodystart="1645" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a37dca6fc0a76c12bc4bc0eac602e3633" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::computeNashEq</definition>
        <argsstring>(bool pureNE=false, double localTimeLimit=-1.0, bool check=false)</argsstring>
        <name>computeNashEq</name>
        <param>
          <type>bool</type>
          <declname>pureNE</declname>
          <defval>false</defval>
          <briefdescription><para>True if we search for a PNE </para>
</briefdescription>
        </param>
        <param>
          <type>double</type>
          <declname>localTimeLimit</declname>
          <defval>-1.0</defval>
          <briefdescription><para>Allowed time limit to run this function </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>check</declname>
          <defval>false</defval>
          <briefdescription><para>If true, the Algorithm will seek for the maximum number of NE. Then, it will check they are equilibria for the original problem </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that <ref refid="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" kindref="member">Game::EPEC::PlayersQP</ref> are all filled with a each country&apos;s <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> problem (either exact or approximate), computes the Nash equilibrium. <simplesect kind="return"><para>true if a Nash equilibrium is found</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games.h" line="584" column="8" bodyfile="src/Games.cpp" bodystart="1950" bodyend="2037"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a1b8553cd89efb9951f7cec24b8c09b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>()=delete</argsstring>
        <name>EPEC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="620" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ae88d958afd4f98f1bb7638759ff1c753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>(EPEC &amp;)=delete</argsstring>
        <name>EPEC</name>
        <param>
          <type><ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="621" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a695b5ed41fdbbf18f2cea05383c2081f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::~EPEC</definition>
        <argsstring>()=default</argsstring>
        <name>~EPEC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="622" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Finalizes the creation of a <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a bunch of job after all data for a <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> object are given, namely. <ref refid="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" kindref="member">Models::EPEC::computeLeaderLocations</ref> - Adds the required dummy variables to each leader&apos;s problem so that a game among the leaders can be defined. Calls <ref refid="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" kindref="member">Game::EPEC::addDummyLead</ref><itemizedlist>
<listitem><para>Makes the market clearing constraint in each country. Calls </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" kindref="member">Game::EPEC::preFinalize()</ref> can be overridden, and that code will run before calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref></para>
<para><ref refid="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" kindref="member">Game::EPEC::postFinalize()</ref> can be overridden, and that code will run after calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref></para>
        </inbodydescription>
        <location file="include/games.h" line="624" column="8" bodyfile="src/Games.cpp" bodystart="1534" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a71db5d5bacd5a7b97437795d797f882b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void</type>
        <definition>const void Game::EPEC::findNashEq</definition>
        <argsstring>()</argsstring>
        <name>findNashEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Computes Nash equilibrium using the Algorithm set in <ref refid="class_game_1_1_e_p_e_c_1a487479646a902f7843ba3a8ddbe6708e" kindref="member">Game::EPEC::Algorithm</ref></para>
<para>Checks the value of <ref refid="class_game_1_1_e_p_e_c_1a487479646a902f7843ba3a8ddbe6708e" kindref="member">Game::EPEC::Algorithm</ref> and delegates the task to appropriate Algorithm wrappers.</para>
        </inbodydescription>
        <location file="include/games.h" line="626" column="14" bodyfile="src/Games.cpp" bodystart="2089" bodyend="2167"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a9c3a719fb69eb3866aa6b440e9a31192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::isSolved</definition>
        <argsstring>(double tol=1e-5) const</argsstring>
        <name>isSolved</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Call the delegated Algorithm and return true if the <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> has been solved.</para>
        </inbodydescription>
        <location file="include/games.h" line="627" column="8" bodyfile="src/Games.cpp" bodystart="2081" bodyend="2087"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::EPEC::respond</definition>
        <argsstring>(const unsigned int i, const arma::vec &amp;x) const</argsstring>
        <name>respond</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="629" column="19" bodyfile="src/Games.cpp" bodystart="1726" bodyend="1744"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3fcda0d435da9c183b73df244ac863a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::respondSol</definition>
        <argsstring>(arma::vec &amp;sol, unsigned int player, const arma::vec &amp;x, const arma::vec &amp;prevDev={}) const</argsstring>
        <name>respondSol</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>sol</declname>
          <briefdescription><para>Optimal response </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>player</declname>
          <briefdescription><para>Player whose optimal response is to be computed </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
          <briefdescription><para>A std::vector of pure strategies (either for all players or all other players </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>prevDev</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the optimal objective value that is obtainable for the player <computeroutput>player</computeroutput> given the decision <computeroutput>x</computeroutput> of all other players.</para>
<para>Calls <ref refid="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" kindref="member">Game::EPEC::respond</ref> and obtains the std::unique_ptr to GRBModel of best response by player <computeroutput>player</computeroutput>. Then solves the model and returns the appropriate objective value. <simplesect kind="return"><para>The optimal objective value for the player <computeroutput>player</computeroutput>.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games.h" line="632" column="10" bodyfile="src/Games.cpp" bodystart="1746" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aacb304f764e52114fdedef15a0a90558" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::vec</type>
        <definition>const arma::vec Game::EPEC::getX</definition>
        <argsstring>() const</argsstring>
        <name>getX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="635" column="19" bodyfile="include/games.h" bodystart="635" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ad53ac72b21e5d73db9e552aa23fb2fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="637" column="8" bodyfile="include/games.h" bodystart="637" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aaaca9d7917b658c77e2fe048bf7a7214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::vec</type>
        <definition>const arma::vec Game::EPEC::getZ</definition>
        <argsstring>() const</argsstring>
        <name>getZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="639" column="19" bodyfile="include/games.h" bodystart="639" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1af02848579e2409da28ce975b8d116adc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::isPureStrategy</definition>
        <argsstring>(double tol=1e-5) const</argsstring>
        <name>isPureStrategy</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a bool indicating whether the equilibrium is a pure strategy </para>
        </detaileddescription>
        <inbodydescription>
<para>Call the delegated Algorithm and return true if the equilibrium is pure</para>
        </inbodydescription>
        <location file="include/games.h" line="641" column="8" bodyfile="src/Games.cpp" bodystart="2074" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a03b6d74bb697a567c41de0253a15d5a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_game_1_1_e_p_e_c_statistics" kindref="compound">EPECStatistics</ref></type>
        <definition>const EPECStatistics Game::EPEC::getStatistics</definition>
        <argsstring>() const</argsstring>
        <name>getStatistics</name>
        <briefdescription>
<para>Get the <ref refid="struct_game_1_1_e_p_e_c_statistics" kindref="compound">EPECStatistics</ref> object for the current instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="646" column="24" bodyfile="include/games.h" bodystart="646" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1addbd62e18bcc408656c330f8cfbb1b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAlgorithm</definition>
        <argsstring>(Game::EPECalgorithm algorithm)</argsstring>
        <name>setAlgorithm</name>
        <param>
          <type><ref refid="namespace_game_1a09f076906bd963c7e558c8f1a9506d1d" kindref="member">Game::EPECalgorithm</ref></type>
          <declname>algorithm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decides the Algorithm to be used for solving the given instance of the problem. The choice of algorithms are documented in <ref refid="namespace_game_1a09f076906bd963c7e558c8f1a9506d1d" kindref="member">Game::EPECalgorithm</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="648" column="8" bodyfile="src/Games.cpp" bodystart="2169" bodyend="2176"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aa6adad5f2653416cb852a0720ccf9987" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_game_1a09f076906bd963c7e558c8f1a9506d1d" kindref="member">Game::EPECalgorithm</ref></type>
        <definition>Game::EPECalgorithm Game::EPEC::getAlgorithm</definition>
        <argsstring>() const</argsstring>
        <name>getAlgorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="650" column="23" bodyfile="include/games.h" bodystart="650" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a63a30d74e2fbe74cf9df603e162caa4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setRecoverStrategy</definition>
        <argsstring>(Game::EPECRecoverStrategy strategy)</argsstring>
        <name>setRecoverStrategy</name>
        <param>
          <type><ref refid="namespace_game_1ad391a76e36d878e9924a5e00ed89f439" kindref="member">Game::EPECRecoverStrategy</ref></type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decides the Algorithm to be used for recovering a PNE out of the InnerApproximation procedure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="654" column="8" bodyfile="src/Games.cpp" bodystart="2178" bodyend="2185"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a67525a1ab20ed9108c6c70e25ce36186" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_game_1ad391a76e36d878e9924a5e00ed89f439" kindref="member">Game::EPECRecoverStrategy</ref></type>
        <definition>Game::EPECRecoverStrategy Game::EPEC::getRecoverStrategy</definition>
        <argsstring>() const</argsstring>
        <name>getRecoverStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="656" column="29" bodyfile="include/games.h" bodystart="656" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3425d5ca9abea1e5ab18f5e53bf91bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAggressiveness</definition>
        <argsstring>(unsigned int a)</argsstring>
        <name>setAggressiveness</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="660" column="8" bodyfile="include/games.h" bodystart="660" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a35bedfe83fdc16fd8462476ebb451cd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getAggressiveness</definition>
        <argsstring>() const</argsstring>
        <name>getAggressiveness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="664" column="16" bodyfile="include/games.h" bodystart="664" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a19e56d50e5ca900bb05247d7e4028772" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setNumThreads</definition>
        <argsstring>(unsigned int t)</argsstring>
        <name>setNumThreads</name>
        <param>
          <type>unsigned int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="668" column="8" bodyfile="include/games.h" bodystart="668" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1acb7aba467faa3bfcd572e8dcce4a7c3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getNumThreads</definition>
        <argsstring>() const</argsstring>
        <name>getNumThreads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="673" column="16" bodyfile="include/games.h" bodystart="673" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aab7d6a3125f1be27f42fa8839d8ec84f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAddPolyMethodSeed</definition>
        <argsstring>(unsigned int t)</argsstring>
        <name>setAddPolyMethodSeed</name>
        <param>
          <type>unsigned int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="677" column="8" bodyfile="include/games.h" bodystart="677" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6f594a6b85327cbf9e45507eb20a6132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Game::EPEC::getAddPolyMethodSeed</definition>
        <argsstring>() const</argsstring>
        <name>getAddPolyMethodSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="681" column="17" bodyfile="include/games.h" bodystart="681" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3b2335bc68d6464ad5af7e74ab91f243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setIndicators</definition>
        <argsstring>(bool val)</argsstring>
        <name>setIndicators</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="685" column="8" bodyfile="include/games.h" bodystart="685" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ab1a26d73539ae4d268b70688e312b747" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::getIndicators</definition>
        <argsstring>() const</argsstring>
        <name>getIndicators</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="687" column="8" bodyfile="include/games.h" bodystart="687" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a437840f2bb7687b81585fc793b5be0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setPureNashEquilibrium</definition>
        <argsstring>(bool val)</argsstring>
        <name>setPureNashEquilibrium</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="689" column="8" bodyfile="include/games.h" bodystart="689" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a15d65c14e30eed4ad6456a34b0dbaeb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::getPureNashEquilibrium</definition>
        <argsstring>() const</argsstring>
        <name>getPureNashEquilibrium</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="693" column="8" bodyfile="include/games.h" bodystart="693" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a4b6238b4052069f2fd7122f327bb70c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setBoundPrimals</definition>
        <argsstring>(bool val)</argsstring>
        <name>setBoundPrimals</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="697" column="8" bodyfile="include/games.h" bodystart="697" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a4971c1bc08aa285bf7f4db06618cf772" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::getBoundPrimals</definition>
        <argsstring>() const</argsstring>
        <name>getBoundPrimals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="701" column="8" bodyfile="include/games.h" bodystart="701" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aab6e24f25d193a514b2c97681a5d2df8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setBoundBigM</definition>
        <argsstring>(double val)</argsstring>
        <name>setBoundBigM</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="705" column="8" bodyfile="include/games.h" bodystart="705" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aef7276e65bf9467f90d90fbdc2a334f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getBoundBigM</definition>
        <argsstring>() const</argsstring>
        <name>getBoundBigM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="707" column="10" bodyfile="include/games.h" bodystart="707" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a9e0fb6903f40b26e00ab1289300b2c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setDeviationTolerance</definition>
        <argsstring>(double val)</argsstring>
        <name>setDeviationTolerance</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="709" column="8" bodyfile="include/games.h" bodystart="709" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ad8a2d364f4a7e61f5f1dfa454a229657" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getDeviationTolerance</definition>
        <argsstring>() const</argsstring>
        <name>getDeviationTolerance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="713" column="10" bodyfile="include/games.h" bodystart="713" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3e714cdf0c2eac38a3d6cb17acde2109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setTimeLimit</definition>
        <argsstring>(double val)</argsstring>
        <name>setTimeLimit</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="717" column="8" bodyfile="include/games.h" bodystart="717" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a22353c0fd28f1423c626006e8ba00052" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getTimeLimit</definition>
        <argsstring>() const</argsstring>
        <name>getTimeLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="719" column="10" bodyfile="include/games.h" bodystart="719" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ac3588ae6663ee577458a98e2dfa71a42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAddPolyMethod</definition>
        <argsstring>(Game::EPECAddPolyMethod add)</argsstring>
        <name>setAddPolyMethod</name>
        <param>
          <type><ref refid="namespace_game_1a1575f114564e7083eaa22c1ae0b2e066" kindref="member">Game::EPECAddPolyMethod</ref></type>
          <declname>add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="721" column="8" bodyfile="include/games.h" bodystart="721" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6ccbebf4b00acfe2eebbf4415f238f3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_game_1a1575f114564e7083eaa22c1ae0b2e066" kindref="member">Game::EPECAddPolyMethod</ref></type>
        <definition>Game::EPECAddPolyMethod Game::EPEC::getAddPolyMethod</definition>
        <argsstring>() const</argsstring>
        <name>getAddPolyMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="725" column="27" bodyfile="include/games.h" bodystart="725" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a7bf2d222ff193b83713849a89c4291ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Game::EPEC::getNumVar</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="731" column="7" bodyfile="include/games.h" bodystart="731" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a676146ffcd3ae1c43462afefebf77f02" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getNumLeaders</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumLeaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="733" column="16" bodyfile="include/games.h" bodystart="733" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a0bf1c7483795c1f08baabf2426ca933d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getPositionLeadFoll</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getPositionLeadFoll</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the j-th variable in the i-th leader Querying <ref refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" kindref="member">Game::EPEC::LCPModel</ref> for x[return-value] variable gives the appropriate variable</para>
        </inbodydescription>
        <location file="include/games.h" line="737" column="16" bodyfile="src/Games.cpp" bodystart="2187" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aec1b59c633f797063362b0ae4323f8ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getPositionLeadLead</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getPositionLeadLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the j-th Follower variable in the i-th leader Querying <ref refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" kindref="member">Game::EPEC::LCPModel</ref> for x[return-value] variable gives the appropriate variable</para>
        </inbodydescription>
        <location file="include/games.h" line="739" column="16" bodyfile="src/Games.cpp" bodystart="2198" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a723c245afbc41788c993566aca9f238c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getValLeadFoll</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getValLeadFoll</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the value of the j-th variable in i-th leader</para>
        </inbodydescription>
        <location file="include/games.h" line="742" column="10" bodyfile="src/Games.cpp" bodystart="2209" bodyend="2220"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a24faf8f9033094c380f38fe3f6609a27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getValLeadLead</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getValLeadLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the value of the j-th non-follower variable in i-th leader</para>
        </inbodydescription>
        <location file="include/games.h" line="744" column="10" bodyfile="src/Games.cpp" bodystart="2222" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aa9f848f3d44b529af6c7b7fb3b4789cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> &amp;</type>
        <definition>const LCP&amp; Game::EPEC::getLCPDescription</definition>
        <argsstring>() const</argsstring>
        <name>getLCPDescription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> object solved in the last iteration either to solve the problem or to prove non-existence of Nash equilibrium. Object is returned using constant reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="749" column="13" bodyfile="include/games.h" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1af4ba9e089745932ff3bf24897af53e5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const GRBModel &amp;</type>
        <definition>const GRBModel&amp; Game::EPEC::getLCPModel</definition>
        <argsstring>() const</argsstring>
        <name>getLCPModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the GRBModel solved in the last iteration to solve the problem or to prove non-existence of Nash equilibrium. Object is returned using constant reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="754" column="18" bodyfile="include/games.h" bodystart="754" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a37fed0d5194d7d4a25953e117593b3a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::writeLCPModel</definition>
        <argsstring>(const std::string &amp;filename) const</argsstring>
        <name>writeLCPModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the GRBModel solved in the last iteration to solve the problem or to prove non-existence of Nash equilibrium to a file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games.h" line="758" column="8" bodyfile="include/games.h" bodystart="758" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aa20feaa35c98de9e134190579a400cf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXWithoutHull</definition>
        <argsstring>(const arma::vec &amp;x, arma::vec &amp;xWithoutHull) const</argsstring>
        <name>getXWithoutHull</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>xWithoutHull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the the solution <computeroutput>x</computeroutput>, the method returns in <computeroutput>xWithoutHull</computeroutput> the x vector without the convex-hull&apos;s variables. Also, no MC variables are included</para>
        </inbodydescription>
        <location file="include/games.h" line="762" column="8" bodyfile="src/Games.cpp" bodystart="1700" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6f84ee2018f9bb85d0b1b53e65ff85e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXofI</definition>
        <argsstring>(const arma::vec &amp;x, const unsigned int &amp;i, arma::vec &amp;solI, bool hull=false) const</argsstring>
        <name>getXofI</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>solI</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hull</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the player id <computeroutput>i</computeroutput> and the solution <computeroutput>x</computeroutput>, the method returns in <computeroutput>xWithoutHull</computeroutput> the x vector for the given player, with the convex-hull&apos;s variables in case <computeroutput>hull</computeroutput> is false. Also, no MC variables are included</para>
        </inbodydescription>
        <location file="include/games.h" line="763" column="8" bodyfile="src/Games.cpp" bodystart="1677" bodyend="1698"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to handle a Nash game between leaders of Stackelberg games. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Models::EPEC</label>
        <link refid="class_models_1_1_e_p_e_c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Game::EPECStatistics</label>
        <link refid="struct_game_1_1_e_p_e_c_statistics"/>
        <childnode refid="3" relation="usage">
          <edgelabel>AlgorithmParam</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Game::EPECAlgorithmParams</label>
        <link refid="struct_game_1_1_e_p_e_c_algorithm_params"/>
      </node>
      <node id="1">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
        <childnode refid="2" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/games.h" line="521" column="11" bodyfile="include/games.h" bodystart="521" bodyend="765"/>
    <listofallmembers>
      <member refid="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>addDummyLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a487479646a902f7843ba3a8ddbe6708e" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithm</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a44680bee32d9e475fc8943b3d41e0c92" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::CombinatorialPNE</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad56f336a443b6cbf7b6122695a760b72" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::FullEnumeration</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a908144402c17832c8af5763dfa36ba48" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::InnerApproximation</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a0366cd2f59c7bda792ec8a4c5a092317" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::OuterApproximation</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a28201199a06ed9cd6a45c7c9cffc3442" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::PolyBase</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>computeLeaderLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a37dca6fc0a76c12bc4bc0eac602e3633" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>computeNashEq</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afd414e30d05368455d9a2eaa166b6bfb" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>ConvexHullVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a19ac846f7e3a018c47b61dc8b5089b60" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Env</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a2323518f6af325c254eaad444cea1317" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1b8553cd89efb9951f7cec24b8c09b5f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ae88d958afd4f98f1bb7638759ff1c753" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>finalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9e4f44f67e4a2956673398847e5db614" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Finalized</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a71db5d5bacd5a7b97437795d797f882b" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>findNashEq</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6ccbebf4b00acfe2eebbf4415f238f3a" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getAddPolyMethod</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6f594a6b85327cbf9e45507eb20a6132" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getAddPolyMethodSeed</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a35bedfe83fdc16fd8462476ebb451cd6" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getAggressiveness</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa6adad5f2653416cb852a0720ccf9987" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getAlgorithm</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aef7276e65bf9467f90d90fbdc2a334f1" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getBoundBigM</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a4971c1bc08aa285bf7f4db06618cf772" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getBoundPrimals</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad8a2d364f4a7e61f5f1dfa454a229657" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getDeviationTolerance</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ab1a26d73539ae4d268b70688e312b747" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getIndicators</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa9f848f3d44b529af6c7b7fb3b4789cf" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getLCPDescription</name></member>
      <member refid="class_game_1_1_e_p_e_c_1af4ba9e089745932ff3bf24897af53e5f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getLCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a676146ffcd3ae1c43462afefebf77f02" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getNumLeaders</name></member>
      <member refid="class_game_1_1_e_p_e_c_1acb7aba467faa3bfcd572e8dcce4a7c3b" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getNumThreads</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a7bf2d222ff193b83713849a89c4291ba" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getNumVar</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a0bf1c7483795c1f08baabf2426ca933d" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getPositionLeadFoll</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aec1b59c633f797063362b0ae4323f8ea" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getPositionLeadLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a15d65c14e30eed4ad6456a34b0dbaeb9" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getPureNashEquilibrium</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a67525a1ab20ed9108c6c70e25ce36186" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getRecoverStrategy</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a03b6d74bb697a567c41de0253a15d5a9" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getStatistics</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a22353c0fd28f1423c626006e8ba00052" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getTimeLimit</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a723c245afbc41788c993566aca9f238c" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getValLeadFoll</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a24faf8f9033094c380f38fe3f6609a27" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getValLeadLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aacb304f764e52114fdedef15a0a90558" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getX</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a03f5dc3947750c69b9c3bfdf675ab394" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>getXMinusI</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6f84ee2018f9bb85d0b1b53e65ff85e4" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getXofI</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa20feaa35c98de9e134190579a400cf7" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getXWithoutHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aaaca9d7917b658c77e2fe048bf7a7214" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getZ</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a157723e234e69a264e9ccf3dec0ec745" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>InitTime</name></member>
      <member refid="class_game_1_1_e_p_e_c_1af02848579e2409da28ce975b8d116adc" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>isPureStrategy</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9c3a719fb69eb3866aa6b440e9a31192" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>isSolved</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>LCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ada0cf8c4cefee9d0e3f6fcd29aa4fac0" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>LCPModelBase</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a59b0ccd12c05db259bb7ca056daf453d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderObjective</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a08077df159307f005f5254e8f72eb5d8" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderObjectiveConvexHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a618f3df2c40a9d456f9ceaf00802967c" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LocEnds</name></member>
      <member refid="class_game_1_1_e_p_e_c_1abd1f66626593e9f02132467bec62573c" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>makeMCConstraints</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a2ee93319f7d964f4c5df850bcf27504e" prot="protected" virt="pure-virtual"><scope>Game::EPEC</scope><name>makeObjectivePlayer</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makePlayerQP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a5db4c964c3d451ab55a5630e565753d0" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makePlayersQPs</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a4d84d3af33242733ec32b89f91d49158" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makeTheLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3dd72f644df2168162d60b12d0993a9d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>NashEquilibrium</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aacadd9d4fb3fd17d2f142db8758f1be9" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>numMCVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a8e4aa5e6b5baa41c7a977b3b66cdfdf2" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>NumPlayers</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afc5252004b0a5c875fdf4517ba60fecd" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>NumVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ae133b3254fa8258788d60f994d1f8e9f" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersLowerLevels</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersQP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>postFinalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>preFinalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad53ac72b21e5d73db9e552aa23fb2fec" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>reset</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>respond</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3fcda0d435da9c183b73df244ac863a0" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>respondSol</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ac3588ae6663ee577458a98e2dfa71a42" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAddPolyMethod</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aab7d6a3125f1be27f42fa8839d8ec84f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAddPolyMethodSeed</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3425d5ca9abea1e5ab18f5e53bf91bd5" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAggressiveness</name></member>
      <member refid="class_game_1_1_e_p_e_c_1addbd62e18bcc408656c330f8cfbb1b2c" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAlgorithm</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aab6e24f25d193a514b2c97681a5d2df8" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setBoundBigM</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a4b6238b4052069f2fd7122f327bb70c5" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setBoundPrimals</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9e0fb6903f40b26e00ab1289300b2c8c" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setDeviationTolerance</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3b2335bc68d6464ad5af7e74ab91f243" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setIndicators</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a19e56d50e5ca900bb05247d7e4028772" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setNumThreads</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a437840f2bb7687b81585fc793b5be0d6" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setPureNashEquilibrium</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a63a30d74e2fbe74cf9df603e162caa4f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setRecoverStrategy</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3e714cdf0c2eac38a3d6cb17acde2109" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setTimeLimit</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad0c30f87298df78ec8b2275fc272745f" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>SizesWithoutHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ac897450f8b0afb2346e872de2fbc82eb" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>SolutionX</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa1a2f0e5df60ca00ccad7b9a8a4f1c8a" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>SolutionZ</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a827a90f6d6c14f8e6d61694f9a63f450" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Stats</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1f958d036ee7569e9488f454158d9c8a" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>TheLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a92ad8e8ed1ff48bcd5509dcbf893c185" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>TheNashGame</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" prot="protected" virt="pure-virtual"><scope>Game::EPEC</scope><name>updateLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>warmstart</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a37fed0d5194d7d4a25953e117593b3a4" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>writeLCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a695b5ed41fdbbf18f2cea05383c2081f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>~EPEC</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
