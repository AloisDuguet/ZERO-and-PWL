<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_game_1_1_l_c_p" kind="class" language="C++" prot="public">
    <compoundname>Game::LCP</compoundname>
    <derivedcompoundref refid="class_game_1_1_outer_l_c_p" prot="public" virt="non-virtual">Game::OuterLCP</derivedcompoundref>
    <derivedcompoundref refid="class_game_1_1_poly_l_c_p" prot="public" virt="non-virtual">Game::PolyLCP</derivedcompoundref>
    <includes refid="lcp_8h" local="no">lcp.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a5e9a233a5316fb7f3f7c63bb75f4abf6" prot="protected" static="no" mutable="no">
        <type>GRBEnv *</type>
        <definition>GRBEnv* Game::LCP::Env</definition>
        <argsstring></argsstring>
        <name>Env</name>
        <briefdescription>
<para>Gurobi Env. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="43" column="14" bodyfile="include/lcp/lcp.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a220ce78f11a0e9550cec63d65411c5f4" prot="protected" static="no" mutable="no">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Game::LCP::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <briefdescription>
<para>M in <formula id="35">$Mx+q$</formula> that defines the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="44" column="15" bodyfile="include/lcp/lcp.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1afffdded2f61d6dee34f312c8a2e4b356" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::LCP::q</definition>
        <argsstring></argsstring>
        <name>q</name>
        <briefdescription>
<para>q in <formula id="35">$Mx+q$</formula> that defines the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="45" column="15" bodyfile="include/lcp/lcp.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a6dbcd747d3b7a82fcd9079916da001df" prot="protected" static="no" mutable="no">
        <type><ref refid="zero_8h_1ad87785d9eb3e6e48c0895b348f6660ca" kindref="member">perps</ref></type>
        <definition>perps Game::LCP::Compl</definition>
        <argsstring></argsstring>
        <name>Compl</name>
        <briefdescription>
<para>Compl stores data in &lt;Eqn, Var&gt; form. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="46" column="15" bodyfile="include/lcp/lcp.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a3626cacccb0d8ab0e1a88f8f1a3659f9" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::LeadStart</definition>
        <argsstring></argsstring>
        <name>LeadStart</name>
        <initializer>{1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="47" column="15" bodyfile="include/lcp/lcp.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a5842889dd444dceda535c0e464775d80" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::LeadEnd</definition>
        <argsstring></argsstring>
        <name>LeadEnd</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="47" column="25" bodyfile="include/lcp/lcp.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a0a8544f8b93d3ed9f7c07580f48c3151" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::NumberLeader</definition>
        <argsstring></argsstring>
        <name>NumberLeader</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="47" column="33" bodyfile="include/lcp/lcp.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a75112da9c4219c166062a928b437ae60" prot="protected" static="no" mutable="no">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Game::LCP::_A</definition>
        <argsstring></argsstring>
        <name>_A</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="48" column="15" bodyfile="include/lcp/lcp.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a0c531992ff29a14f598a54fa67a789a6" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::LCP::_b</definition>
        <argsstring></argsstring>
        <name>_b</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apart from <formula id="42">$0 \le x \perp Mx+q\ge 0$</formula>, one needs <formula id="43">$ &lt; Ax\le b$</formula> too! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="49" column="15" bodyfile="include/lcp/lcp.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1aba71ce89427bac3178dd053b0f92855f" prot="protected" static="no" mutable="no">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Game::LCP::_Acut</definition>
        <argsstring></argsstring>
        <name>_Acut</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="51" column="15" bodyfile="include/lcp/lcp.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1ae44ef5e71958457bc4c12097f9bdc206" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::LCP::_bcut</definition>
        <argsstring></argsstring>
        <name>_bcut</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Cutting planes eventually added to the model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="52" column="15" bodyfile="include/lcp/lcp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a2145443fd73ae38b4e4b02637bf6a0e2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::LCP::MadeRlxdModel</definition>
        <argsstring></argsstring>
        <name>MadeRlxdModel</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Keep track if <ref refid="class_game_1_1_l_c_p_1a187fe2df5192bc2354944d807a361333" kindref="member">LCP::RlxdModel</ref> is made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="53" column="15" bodyfile="include/lcp/lcp.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1aa209e8dc6b817bff5750b1f98f1a6a6d" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::nR</definition>
        <argsstring></argsstring>
        <name>nR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="54" column="15" bodyfile="include/lcp/lcp.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1abeaadbce4a891d3575dddae796592c72" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::nC</definition>
        <argsstring></argsstring>
        <name>nC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="54" column="18" bodyfile="include/lcp/lcp.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a187fe2df5192bc2354944d807a361333" prot="protected" static="no" mutable="no">
        <type>GRBModel</type>
        <definition>GRBModel Game::LCP::RlxdModel</definition>
        <argsstring></argsstring>
        <name>RlxdModel</name>
        <briefdescription>
<para>removed. </para>
        </briefdescription>
        <detaileddescription>
<para>A gurobi model with all complementarity constraints </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="56" column="11" bodyfile="include/lcp/lcp.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a8f71d6ee194330de1441c3911b74bff6" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="zero_8h_1a47898f11e7a4b7433acbc77588a0dc03" kindref="member">spmat_Vec</ref> &gt;</type>
        <definition>std::unique_ptr&lt;spmat_Vec&gt; Game::LCP::Ai</definition>
        <argsstring></argsstring>
        <name>Ai</name>
        <briefdescription>
<para>approximated) of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>&apos;s feasible region </para>
        </briefdescription>
        <detaileddescription>
<para>Vector to contain the LHSs of a description (either exact or </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="72" column="18" bodyfile="include/lcp/lcp.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1afcae3294d6a3492d4a1b77a1d72ccf60" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="zero_8h_1a8d8c882d060c4d307810fdf04a6314c6" kindref="member">vec_Vec</ref> &gt;</type>
        <definition>std::unique_ptr&lt;vec_Vec&gt; Game::LCP::bi</definition>
        <argsstring></argsstring>
        <name>bi</name>
        <briefdescription>
<para>approximated) of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>&apos;s feasible region </para>
        </briefdescription>
        <detaileddescription>
<para>Vector to contain the RHSs of a description (either exact or </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="74" column="18" bodyfile="include/lcp/lcp.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1aa729a92224dec4a4bf895a34ca711190" prot="public" static="no" mutable="no">
        <type>long double</type>
        <definition>long double Game::LCP::BigM</definition>
        <argsstring></argsstring>
        <name>BigM</name>
        <initializer>{1e7}</initializer>
        <briefdescription>
<para>BigM used to rewrite the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as MIP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="82" column="14" bodyfile="include/lcp/lcp.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1af88f1e7ee2425f584c5acb4868c1b531" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Game::LCP::Eps</definition>
        <argsstring></argsstring>
        <name>Eps</name>
        <initializer>{1e-6}</initializer>
        <briefdescription>
<para>The threshold for optimality and feasability tolerances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="83" column="14" bodyfile="include/lcp/lcp.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1a98d96c73d2ec4a19517c6c633d2130b7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Game::LCP::EpsInt</definition>
        <argsstring></argsstring>
        <name>EpsInt</name>
        <initializer>{1e-8}</initializer>
        <briefdescription>
<para>considered to be zero. </para>
        </briefdescription>
        <detaileddescription>
<para>The threshold, below which a number would be </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="84" column="14" bodyfile="include/lcp/lcp.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_l_c_p_1ac7b07ba8761ea4fbd7164febaf25d696" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::LCP::UseIndicators</definition>
        <argsstring></argsstring>
        <name>UseIndicators</name>
        <initializer>{true}</initializer>
        <briefdescription>
<para>constraints. BigM formulation otherwise </para>
        </briefdescription>
        <detaileddescription>
<para>If true, complementarities will be handled with indicator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="86" column="7" bodyfile="include/lcp/lcp.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a2d2876ada5a9d435754561cbbc5b6352" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::LCP::errorCheck</definition>
        <argsstring>(bool throwErr=true) const</argsstring>
        <name>errorCheck</name>
        <param>
          <type>bool</type>
          <declname>throwErr</declname>
          <defval>true</defval>
          <briefdescription><para>If this is true, function throws an error, else, it just returns false </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the <computeroutput>M</computeroutput> and <computeroutput>q</computeroutput> given to create the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> object are of compatible size, given the number of leader variables </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="59" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="311" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a99d7d4a906d78149e7ff1701f6d7d4aa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::defConst</definition>
        <argsstring>(GRBEnv *env)</argsstring>
        <name>defConst</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Assign default values to <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal member that can be called from multiple constructors to assign default values to some attributes of the class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="61" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="11" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a777726134bf9ffc8fa0c6bfe8ffdb6fc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::makeRelaxed</definition>
        <argsstring>()</argsstring>
        <name>makeRelaxed</name>
        <briefdescription>
<para>Makes a Gurobi object that relaxes complementarity constraints in an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>A Gurobi object is stored in the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> object, that has all complementarity constraints removed. A copy of this object is used by other member functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="63" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="123" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a4c22fc6e301f34d6649e255e692d5799" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::LCPasMIP</definition>
        <argsstring>(std::vector&lt; unsigned int &gt; FixEq={}, std::vector&lt; unsigned int &gt; FixVar={}, bool solve=false)</argsstring>
        <name>LCPasMIP</name>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>FixEq</declname>
          <defval>{}</defval>
          <briefdescription><para>If any equation is to be fixed to equality </para>
</briefdescription>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>FixVar</declname>
          <defval>{}</defval>
          <briefdescription><para>If any variable is to be fixed to equality </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <defval>false</defval>
          <briefdescription><para>Whether the model should be solved in the function before returned. </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the big M method to solve the complementarity problem. The variables and equations to be set to equality can be given in FixVar and FixEq. <simplesect kind="note"><para>Returned model is <emphasis>always</emphasis> a restriction. For <computeroutput>FixEq = FixVar = {}</computeroutput>, the returned model would solve the exact <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
</simplesect>
<simplesect kind="warning"><para>Note that the model returned by this function has to be explicitly deleted using the delete operator. </para>
</simplesect>
<simplesect kind="return"><para>unique pointer to a GRBModel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="66" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="204" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a4530c61c56c08e195e93f52a15875dd8" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Game::LCP::isZero</definition>
        <argsstring>(const T val) const</argsstring>
        <name>isZero</name>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="70" column="26" bodyfile="include/lcp/lcp.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a9cb1d44937ea87d794352f94bf1f6fe3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Game::LCP::solEncode</definition>
        <argsstring>(GRBModel *model) const</argsstring>
        <name>solEncode</name>
        <param>
          <type>GRBModel *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Given a Gurobi model, extracts variable values and equation values, encodes it in 0/+1/-1 format and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Note that the std::vector returned by this function might have to be explicitly deleted using the delete operator. For specific uses in LCP::BranchAndPrune, this delete is handled by the class destructor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="77" column="21" bodyfile="src/lcp/lcp.cpp" bodystart="412" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1aab450b015162c87d06194c0cd36b26e2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::convexHull</definition>
        <argsstring>(arma::sp_mat &amp;A, arma::vec &amp;b)</argsstring>
        <name>convexHull</name>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>A</declname>
          <briefdescription><para>Convex hull inequality description LHS to be stored here </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>b</declname>
          <briefdescription><para>Convex hull inequality description RHS </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the convex hull of the feasible region of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="79" column="15" bodyfile="src/lcp/lcp.cpp" bodystart="628" bodyend="661"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a8f354ec1846b682d4e8d526c4408e702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::LCP</definition>
        <argsstring>()=delete</argsstring>
        <name>LCP</name>
        <briefdescription>
<para>Class has no default constructors. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="91" column="2"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1affd1945600584a97ee0b95a803e70a93" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::LCP</definition>
        <argsstring>(GRBEnv *e)</argsstring>
        <name>LCP</name>
        <param>
          <type>GRBEnv *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="93" column="11" bodyfile="include/lcp/lcp.h" bodystart="93" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1af6442053d33eb07c14bdfcad02d4cbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::LCP</definition>
        <argsstring>(GRBEnv *env, arma::sp_mat M, arma::vec q, unsigned int leadStart, unsigned leadEnd, arma::sp_mat A={}, arma::vec b={})</argsstring>
        <name>LCP</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
          <briefdescription><para>Gurobi environment required </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat</type>
          <declname>M</declname>
          <briefdescription><para><computeroutput>M</computeroutput> in <formula id="35">$Mx+q$</formula> </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>q</declname>
          <briefdescription><para><computeroutput>q</computeroutput> in <formula id="35">$Mx+q$</formula> </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>leadStart</declname>
          <briefdescription><para>Position where variables which are not complementary to any equation starts </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned</type>
          <declname>leadEnd</declname>
          <briefdescription><para>Position where variables which are not complementary to any equation ends </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat</type>
          <declname>A</declname>
          <defval>{}</defval>
          <briefdescription><para>Any equations without a complemntarity variable </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>b</declname>
          <defval>{}</defval>
          <briefdescription><para>RHS of equations without complementarity variables </para>
</briefdescription>
        </param>
        <briefdescription>
<para>This constructor flor loading <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This might be deprecated to support <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> functioning without sticking to the output format of <ref refid="class_game_1_1_nash_game" kindref="compound">NashGame</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="96" column="2" bodyfile="src/lcp/lcp.cpp" bodystart="51" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a26af85e6c2bca5744cf2148da9539f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::LCP</definition>
        <argsstring>(GRBEnv *env, arma::sp_mat M, arma::vec q, perps Compl, arma::sp_mat A={}, arma::vec b={})</argsstring>
        <name>LCP</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
          <briefdescription><para>Gurobi environment required </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat</type>
          <declname>M</declname>
          <briefdescription><para><computeroutput>M</computeroutput> in <formula id="35">$Mx+q$</formula> </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>q</declname>
          <briefdescription><para><computeroutput>q</computeroutput> in <formula id="35">$Mx+q$</formula> </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="zero_8h_1ad87785d9eb3e6e48c0895b348f6660ca" kindref="member">perps</ref></type>
          <declname>Compl</declname>
          <briefdescription><para>Pairing equations and variables for complementarity </para>
</briefdescription>
        </param>
        <param>
          <type>arma::sp_mat</type>
          <declname>A</declname>
          <defval>{}</defval>
          <briefdescription><para>Any equations without a complementarity variable </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec</type>
          <declname>b</declname>
          <defval>{}</defval>
          <briefdescription><para>RHS of equations without complementarity variables </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="103" column="2" bodyfile="src/lcp/lcp.cpp" bodystart="24" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1aced553b2e3edc31b20e4668c6146f583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::LCP</definition>
        <argsstring>(GRBEnv *env, const NashGame &amp;N)</argsstring>
        <name>LCP</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>const <ref refid="class_game_1_1_nash_game" kindref="compound">NashGame</ref> &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Constructor given a <ref refid="class_game_1_1_nash_game" kindref="compound">NashGame</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a <ref refid="class_game_1_1_nash_game" kindref="compound">NashGame</ref>, computes the KKT of the lower levels, and makes the appropriate <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> object. This constructor is the most suited for high-level usage. <simplesect kind="note"><para>Most preferred constructor for user interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="109" column="2" bodyfile="src/lcp/lcp.cpp" bodystart="84" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1acd69c7ff6422ebbb8ab0b5d83812e262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::LCP::~LCP</definition>
        <argsstring>()=default</argsstring>
        <name>~LCP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor - to delete the objects created with new operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="112" column="2"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a3ced9ff9dd3e3075326335ebeecc4229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat Game::LCP::getM</definition>
        <argsstring>()</argsstring>
        <name>getM</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1a220ce78f11a0e9550cec63d65411c5f4" kindref="member">LCP::M</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return data and address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="115" column="23" bodyfile="include/lcp/lcp.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1ae84003685742b9de4c91b21e91055970" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::sp_mat *</type>
        <definition>arma::sp_mat* Game::LCP::getMstar</definition>
        <argsstring>()</argsstring>
        <name>getMstar</name>
        <briefdescription>
<para>Reference access to <ref refid="class_game_1_1_l_c_p_1a220ce78f11a0e9550cec63d65411c5f4" kindref="member">LCP::M</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="116" column="22" bodyfile="include/lcp/lcp.h" bodystart="116" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a3cc8c85eca98fb717a4487dc7ed692cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Game::LCP::getq</definition>
        <argsstring>()</argsstring>
        <name>getq</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1afffdded2f61d6dee34f312c8a2e4b356" kindref="member">LCP::q</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="117" column="23" bodyfile="include/lcp/lcp.h" bodystart="117" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1aba5830b8f67b850954ac372aaf420e19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::getNumberLeader</definition>
        <argsstring>()</argsstring>
        <name>getNumberLeader</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1afffdded2f61d6dee34f312c8a2e4b356" kindref="member">LCP::q</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="118" column="23" bodyfile="include/lcp/lcp.h" bodystart="118" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a52df9c31f5d00c00803fe1a6f4b60534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::vec *</type>
        <definition>arma::vec* Game::LCP::getqstar</definition>
        <argsstring>()</argsstring>
        <name>getqstar</name>
        <briefdescription>
<para>Reference access to <ref refid="class_game_1_1_l_c_p_1afffdded2f61d6dee34f312c8a2e4b356" kindref="member">LCP::q</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="121" column="27" bodyfile="include/lcp/lcp.h" bodystart="121" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a351c9d968ca93d32bb183bbd56c539c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const unsigned int</type>
        <definition>const unsigned int Game::LCP::getLStart</definition>
        <argsstring>()</argsstring>
        <name>getLStart</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1a3626cacccb0d8ab0e1a88f8f1a3659f9" kindref="member">LCP::LeadStart</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="122" column="28" bodyfile="include/lcp/lcp.h" bodystart="122" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a7706f73777b1d3b66b1e5b97b04660c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const unsigned int</type>
        <definition>const unsigned int Game::LCP::getLEnd</definition>
        <argsstring>()</argsstring>
        <name>getLEnd</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1a5842889dd444dceda535c0e464775d80" kindref="member">LCP::LeadEnd</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="125" column="28" bodyfile="include/lcp/lcp.h" bodystart="125" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a56d3a73e7eea32833e3fc4f08c910e7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="zero_8h_1ad87785d9eb3e6e48c0895b348f6660ca" kindref="member">perps</ref></type>
        <definition>perps Game::LCP::getCompl</definition>
        <argsstring>()</argsstring>
        <name>getCompl</name>
        <briefdescription>
<para>Read-only access to <ref refid="class_game_1_1_l_c_p_1a6dbcd747d3b7a82fcd9079916da001df" kindref="member">LCP::Compl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="126" column="28" bodyfile="include/lcp/lcp.h" bodystart="126" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a0b673739018e4626f4f08b453e580eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::print</definition>
        <argsstring>(std::string end=&quot;\n&quot;)</argsstring>
        <name>print</name>
        <param>
          <type>std::string</type>
          <declname>end</declname>
          <defval>&quot;\n&quot;</defval>
        </param>
        <briefdescription>
<para>Print a summary of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="127" column="28" bodyfile="src/lcp/lcp.cpp" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a1bfe98fa1f54f78e2e7524737b573bfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::getNumCols</definition>
        <argsstring>()</argsstring>
        <name>getNumCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="128" column="28" bodyfile="include/lcp/lcp.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1abebfd11b7cab3a214c31b9ca3442f72e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::LCP::getNumRows</definition>
        <argsstring>()</argsstring>
        <name>getNumRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="130" column="22" bodyfile="include/lcp/lcp.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a25b0cf47517b0adc600ba5e71f8b98e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::LCP::extractSols</definition>
        <argsstring>(GRBModel *model, arma::vec &amp;z, arma::vec &amp;x, bool extractZ=false) const</argsstring>
        <name>extractSols</name>
        <param>
          <type>GRBModel *</type>
          <declname>model</declname>
          <briefdescription><para>The Gurobi Model that was solved (perhaps using <ref refid="class_game_1_1_l_c_p_1a4c22fc6e301f34d6649e255e692d5799" kindref="member">Game::LCP::LCPasMIP</ref>) </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>z</declname>
          <briefdescription><para>Output variable - where the equation values are stored </para>
</briefdescription>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>x</declname>
          <briefdescription><para>Output variable - where the variable values are stored </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>extractZ</declname>
          <defval>false</defval>
          <briefdescription><para>z values are filled only if this is true </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Extracts variable and equation values from a solved Gurobi model for <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This solves the model if the model is not already solve </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if the model is not solved to optimality. <computeroutput>true</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="132" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="337" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1ae9389315873f8bf470c9ed80250c65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::LCPasQP</definition>
        <argsstring>(bool solve=false)</argsstring>
        <name>LCPasQP</name>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Solves the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as a QP using Gurobi. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes all complementarity constraints from the QP&apos;s constraints. Instead, the sum of products of complementarity pairs is minimized. If the optimal value turns out to be 0, then it is actually a solution of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. Else the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> is infeasible. <simplesect kind="warning"><para>Solves the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> feasibility problem. Not the MPEC optimization problem. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="135" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="426" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a460788245a88de27ebea9aece253a832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::LCPasMIP</definition>
        <argsstring>(bool solve=false)</argsstring>
        <name>LCPasMIP</name>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Helps solving an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as an MIP using BigM constraints. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unique_ptr to GRBModel that has the equivalent MIP</para>
</simplesect>
The MIP problem that is returned by this function is equivalent to the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> problem provided the value of BigM is large enough. <simplesect kind="note"><para>This solves just the feasibility problem. Should you need a leader&apos;s objective function, use <ref refid="class_game_1_1_l_c_p_1a966ef9dc503c215501e27dcfe02af8ff" kindref="member">LCP::MPECasMILP</ref> or <ref refid="class_game_1_1_l_c_p_1a7e9ffaa72ecfd60e2fa3155d011f720b" kindref="member">LCP::MPECasMIQP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="137" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="464" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a966ef9dc503c215501e27dcfe02af8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::MPECasMILP</definition>
        <argsstring>(const arma::sp_mat &amp;C, const arma::vec &amp;c, const arma::vec &amp;x_minus_i, bool solve=false)</argsstring>
        <name>MPECasMILP</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x_minus_i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Helps solving an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as an MIP. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unique_ptr to GRBModel that has the equivalent MIP</para>
</simplesect>
The MIP problem that is returned by this function is equivalent to the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> problem. The function differs from <ref refid="class_game_1_1_l_c_p_1a4c22fc6e301f34d6649e255e692d5799" kindref="member">LCP::LCPasMIP</ref> by the fact that, this explicitly takes a leader objective, and returns an object with this objective. <simplesect kind="note"><para>The leader&apos;s objective has to be linear here. For quadratic objectives, refer <ref refid="class_game_1_1_l_c_p_1a7e9ffaa72ecfd60e2fa3155d011f720b" kindref="member">LCP::MPECasMIQP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="139" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="477" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1ae7cfc28ee5fe3b678522e191cf265fe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Game::LCP::solEncode</definition>
        <argsstring>(const arma::vec &amp;z, const arma::vec &amp;x) const</argsstring>
        <name>solEncode</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>z</declname>
          <briefdescription><para>Equation values </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
          <briefdescription><para>Variable values </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Given variable values and equation values, encodes it in 0/+1/-1 format and returns it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="144" column="14" bodyfile="src/lcp/lcp.cpp" bodystart="386" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a7e9ffaa72ecfd60e2fa3155d011f720b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::MPECasMIQP</definition>
        <argsstring>(const arma::sp_mat &amp;Q, const arma::sp_mat &amp;C, const arma::vec &amp;c, const arma::vec &amp;x_minus_i, bool solve=false)</argsstring>
        <name>MPECasMIQP</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x_minus_i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Helps solving an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as an MIQPs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unique_ptr to GRBModel that has the equivalent MIQP</para>
</simplesect>
The MIQP problem that is returned by this function is equivalent to the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> problem provided the value of BigM is large enough. The function differs from <ref refid="class_game_1_1_l_c_p_1a4c22fc6e301f34d6649e255e692d5799" kindref="member">LCP::LCPasMIP</ref> by the fact that, this explicitly takes a leader objective, and returns an object with this objective. This allows quadratic leader objective. If you are aware that the leader&apos;s objective is linear, use the faster method <ref refid="class_game_1_1_l_c_p_1a966ef9dc503c215501e27dcfe02af8ff" kindref="member">LCP::MPECasMILP</ref> </para>
        </detaileddescription>
        <inbodydescription>
<para>Note that if the matrix Q is a zero matrix, then this returns a Gurobi MILP model as opposed to MIQP model. This enables Gurobi to use its much advanced MIP solver</para>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="146" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="519" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1aac1de9da2006efce0cecc1881efba0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::LCP::LCPasMIP</definition>
        <argsstring>(std::vector&lt; short int &gt; Fixes, bool solve)</argsstring>
        <name>LCPasMIP</name>
        <param>
          <type>std::vector&lt; short int &gt;</type>
          <declname>Fixes</declname>
          <briefdescription><para>For each Variable, +1 fixes the equation to equality and -1 fixes the variable to equality. A value of 0 fixes neither. </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>solve</declname>
          <briefdescription><para>Whether the model is to be solved before returned </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the big M method to solve the complementarity problem. The variables and eqns to be set to equality can be given in Fixes in 0/+1/-1 notation <simplesect kind="note"><para>Returned model is <emphasis>always</emphasis> a restriction. For <computeroutput>Fixes = {0,...,0}</computeroutput>, the returned model would solve the exact <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput> Fixes.size()!= </computeroutput> number of equations (for complementarity). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Note that the model returned by this function has to be explicitly deleted using the delete operator. </para>
</simplesect>
<simplesect kind="return"><para>unique pointer to a GRBModel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="152" column="18" bodyfile="src/lcp/lcp.cpp" bodystart="175" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1abd4348549394ab1692315b26620eceab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::write</definition>
        <argsstring>(std::string filename, bool append=true) const</argsstring>
        <name>write</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="154" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="553" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a7c3f4e815fd66dd5d516d911f588857c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::save</definition>
        <argsstring>(std::string filename, bool erase=true) const</argsstring>
        <name>save</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>erase</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="156" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="571" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a474418dda015aabcfde678cfe45b4080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int Game::LCP::load</definition>
        <argsstring>(std::string filename, long int pos=0)</argsstring>
        <name>load</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="158" column="11" bodyfile="src/lcp/lcp.cpp" bodystart="585" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a6d217671aff04dd01e69f2311352611b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Game::LCP::makeQP</definition>
        <argsstring>(QP_Objective &amp;QP_obj, QP_Param &amp;QP)</argsstring>
        <name>makeQP</name>
        <param>
          <type><ref refid="struct_game_1_1_q_p___objective" kindref="compound">QP_Objective</ref> &amp;</type>
          <declname>QP_obj</declname>
          <briefdescription><para>Objective function of the final QP that has to be made </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="class_game_1_1_q_p___param" kindref="compound">QP_Param</ref> &amp;</type>
          <declname>QP</declname>
          <briefdescription><para>This is the <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> that results from the input objective and the convex hull of the region defined by <ref refid="class_game_1_1_outer_l_c_p" kindref="compound">Game::OuterLCP</ref> </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> stores a description of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> feasible region, calls <ref refid="class_game_1_1_l_c_p_1aab450b015162c87d06194c0cd36b26e2" kindref="member">Game::LCP::convexHull</ref> to construct the convex hull. The polyhedral convex hull and the given objective are combined to create the output <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref>.</para>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="160" column="15" bodyfile="src/lcp/lcp.cpp" bodystart="663" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a01cc591a0ab7e4930de2cca20ff623ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::LCP::addCustomCuts</definition>
        <argsstring>(const arma::sp_mat A, const arma::vec b)</argsstring>
        <name>addCustomCuts</name>
        <param>
          <type>const arma::sp_mat</type>
          <declname>A</declname>
          <briefdescription><para>The LHS of the added cuts </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec</type>
          <declname>b</declname>
          <briefdescription><para>The RHS of the added cuts </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> stores a description of the new cuts of <computeroutput>A</computeroutput> (and RHS <computeroutput>b</computeroutput>) in <ref refid="class_game_1_1_l_c_p_1aba71ce89427bac3178dd053b0f92855f" kindref="member">LCP::_Acut</ref> and <ref refid="class_game_1_1_l_c_p_1ae44ef5e71958457bc4c12097f9bdc206" kindref="member">LCP::_bcut</ref></para>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="162" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="694" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1abdf05d0d0fb6926b10445bf01707cb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::LCP::containCut</definition>
        <argsstring>(const arma::vec LHS, const double RHS, double tol=1e-5)</argsstring>
        <name>containCut</name>
        <param>
          <type>const arma::vec</type>
          <declname>LHS</declname>
          <briefdescription><para>The LHS of the cut </para>
</briefdescription>
        </param>
        <param>
          <type>const double</type>
          <declname>RHS</declname>
          <briefdescription><para>The rHS of the cut </para>
</briefdescription>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
          <briefdescription><para>optional tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> stores a description of a cut in <ref refid="class_game_1_1_l_c_p_1aba71ce89427bac3178dd053b0f92855f" kindref="member">LCP::_Acut</ref> and <ref refid="class_game_1_1_l_c_p_1ae44ef5e71958457bc4c12097f9bdc206" kindref="member">LCP::_bcut</ref>, this method check if <computeroutput>LHS</computeroutput> and <computeroutput>RHS</computeroutput> are part of this description</para>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="164" column="7" bodyfile="src/lcp/lcp.cpp" bodystart="714" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1a33a303e1e3643475f06dd1204dd6c27c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; short int &gt;</type>
        <definition>std::vector&lt; short int &gt; Game::LCP::solEncode</definition>
        <argsstring>(const arma::vec &amp;x) const</argsstring>
        <name>solEncode</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Given variable values, encodes it in 0/+1/-1 format and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>Gives the 0/+1/-1 notation. The notation is defined as follows. Note that, if the input is feasible, then in each complementarity pair (Eqn, Var), at least one of the two is zero.</para>
<para><itemizedlist>
<listitem><para>If the equation is zero in a certain index and the variable is non-zero, then that index is noted by +1.</para>
</listitem><listitem><para>If the variable is zero in a certain index and the equation is non-zero, then that index is noted by +1.</para>
</listitem><listitem><para>If both the variable and equation are zero, then that index is noted by 0. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="166" column="14" bodyfile="src/lcp/lcp.cpp" bodystart="368" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_l_c_p_1ab5c2258c4d017ca269c42ba1d689c5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>arma::vec</type>
        <definition>arma::vec Game::LCP::zFromX</definition>
        <argsstring>(const arma::vec x)</argsstring>
        <name>zFromX</name>
        <param>
          <type>const arma::vec</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lcp/lcp.h" line="168" column="12" bodyfile="src/lcp/lcp.cpp" bodystart="384" bodyend="384"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to handle and solve linear complementarity problems. </para>
    </briefdescription>
    <detaileddescription>
<para>A class to handle linear complementarity problems (<ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>) especially as MIPs with BigM constraints </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Game::OuterLCP</label>
        <link refid="class_game_1_1_outer_l_c_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Game::PolyLCP</label>
        <link refid="class_game_1_1_poly_l_c_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Game::LCP</label>
        <link refid="class_game_1_1_l_c_p"/>
      </node>
    </inheritancegraph>
    <location file="include/lcp/lcp.h" line="39" column="12" bodyfile="include/lcp/lcp.h" bodystart="39" bodyend="169"/>
    <listofallmembers>
      <member refid="class_game_1_1_l_c_p_1a75112da9c4219c166062a928b437ae60" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>_A</name></member>
      <member refid="class_game_1_1_l_c_p_1aba71ce89427bac3178dd053b0f92855f" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>_Acut</name></member>
      <member refid="class_game_1_1_l_c_p_1a0c531992ff29a14f598a54fa67a789a6" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>_b</name></member>
      <member refid="class_game_1_1_l_c_p_1ae44ef5e71958457bc4c12097f9bdc206" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>_bcut</name></member>
      <member refid="class_game_1_1_l_c_p_1a01cc591a0ab7e4930de2cca20ff623ff" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>addCustomCuts</name></member>
      <member refid="class_game_1_1_l_c_p_1a8f71d6ee194330de1441c3911b74bff6" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>Ai</name></member>
      <member refid="class_game_1_1_l_c_p_1afcae3294d6a3492d4a1b77a1d72ccf60" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>bi</name></member>
      <member refid="class_game_1_1_l_c_p_1aa729a92224dec4a4bf895a34ca711190" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>BigM</name></member>
      <member refid="class_game_1_1_l_c_p_1a6dbcd747d3b7a82fcd9079916da001df" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>Compl</name></member>
      <member refid="class_game_1_1_l_c_p_1abdf05d0d0fb6926b10445bf01707cb20" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>containCut</name></member>
      <member refid="class_game_1_1_l_c_p_1aab450b015162c87d06194c0cd36b26e2" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>convexHull</name></member>
      <member refid="class_game_1_1_l_c_p_1a99d7d4a906d78149e7ff1701f6d7d4aa" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>defConst</name></member>
      <member refid="class_game_1_1_l_c_p_1a5e9a233a5316fb7f3f7c63bb75f4abf6" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>Env</name></member>
      <member refid="class_game_1_1_l_c_p_1af88f1e7ee2425f584c5acb4868c1b531" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>Eps</name></member>
      <member refid="class_game_1_1_l_c_p_1a98d96c73d2ec4a19517c6c633d2130b7" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>EpsInt</name></member>
      <member refid="class_game_1_1_l_c_p_1a2d2876ada5a9d435754561cbbc5b6352" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>errorCheck</name></member>
      <member refid="class_game_1_1_l_c_p_1a25b0cf47517b0adc600ba5e71f8b98e5" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>extractSols</name></member>
      <member refid="class_game_1_1_l_c_p_1a56d3a73e7eea32833e3fc4f08c910e7f" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getCompl</name></member>
      <member refid="class_game_1_1_l_c_p_1a7706f73777b1d3b66b1e5b97b04660c1" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getLEnd</name></member>
      <member refid="class_game_1_1_l_c_p_1a351c9d968ca93d32bb183bbd56c539c5" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getLStart</name></member>
      <member refid="class_game_1_1_l_c_p_1a3ced9ff9dd3e3075326335ebeecc4229" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getM</name></member>
      <member refid="class_game_1_1_l_c_p_1ae84003685742b9de4c91b21e91055970" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getMstar</name></member>
      <member refid="class_game_1_1_l_c_p_1aba5830b8f67b850954ac372aaf420e19" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getNumberLeader</name></member>
      <member refid="class_game_1_1_l_c_p_1a1bfe98fa1f54f78e2e7524737b573bfd" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getNumCols</name></member>
      <member refid="class_game_1_1_l_c_p_1abebfd11b7cab3a214c31b9ca3442f72e" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getNumRows</name></member>
      <member refid="class_game_1_1_l_c_p_1a3cc8c85eca98fb717a4487dc7ed692cd" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getq</name></member>
      <member refid="class_game_1_1_l_c_p_1a52df9c31f5d00c00803fe1a6f4b60534" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>getqstar</name></member>
      <member refid="class_game_1_1_l_c_p_1a4530c61c56c08e195e93f52a15875dd8" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>isZero</name></member>
      <member refid="class_game_1_1_l_c_p_1a8f354ec1846b682d4e8d526c4408e702" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCP</name></member>
      <member refid="class_game_1_1_l_c_p_1affd1945600584a97ee0b95a803e70a93" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCP</name></member>
      <member refid="class_game_1_1_l_c_p_1af6442053d33eb07c14bdfcad02d4cbea" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCP</name></member>
      <member refid="class_game_1_1_l_c_p_1a26af85e6c2bca5744cf2148da9539f31" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCP</name></member>
      <member refid="class_game_1_1_l_c_p_1aced553b2e3edc31b20e4668c6146f583" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCP</name></member>
      <member refid="class_game_1_1_l_c_p_1a4c22fc6e301f34d6649e255e692d5799" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>LCPasMIP</name></member>
      <member refid="class_game_1_1_l_c_p_1a460788245a88de27ebea9aece253a832" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCPasMIP</name></member>
      <member refid="class_game_1_1_l_c_p_1aac1de9da2006efce0cecc1881efba0b6" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCPasMIP</name></member>
      <member refid="class_game_1_1_l_c_p_1ae9389315873f8bf470c9ed80250c65f5" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>LCPasQP</name></member>
      <member refid="class_game_1_1_l_c_p_1a5842889dd444dceda535c0e464775d80" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>LeadEnd</name></member>
      <member refid="class_game_1_1_l_c_p_1a3626cacccb0d8ab0e1a88f8f1a3659f9" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>LeadStart</name></member>
      <member refid="class_game_1_1_l_c_p_1a474418dda015aabcfde678cfe45b4080" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>load</name></member>
      <member refid="class_game_1_1_l_c_p_1a220ce78f11a0e9550cec63d65411c5f4" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>M</name></member>
      <member refid="class_game_1_1_l_c_p_1a2145443fd73ae38b4e4b02637bf6a0e2" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>MadeRlxdModel</name></member>
      <member refid="class_game_1_1_l_c_p_1a6d217671aff04dd01e69f2311352611b" prot="public" virt="virtual"><scope>Game::LCP</scope><name>makeQP</name></member>
      <member refid="class_game_1_1_l_c_p_1a777726134bf9ffc8fa0c6bfe8ffdb6fc" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>makeRelaxed</name></member>
      <member refid="class_game_1_1_l_c_p_1a966ef9dc503c215501e27dcfe02af8ff" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>MPECasMILP</name></member>
      <member refid="class_game_1_1_l_c_p_1a7e9ffaa72ecfd60e2fa3155d011f720b" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>MPECasMIQP</name></member>
      <member refid="class_game_1_1_l_c_p_1abeaadbce4a891d3575dddae796592c72" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>nC</name></member>
      <member refid="class_game_1_1_l_c_p_1aa209e8dc6b817bff5750b1f98f1a6a6d" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>nR</name></member>
      <member refid="class_game_1_1_l_c_p_1a0a8544f8b93d3ed9f7c07580f48c3151" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>NumberLeader</name></member>
      <member refid="class_game_1_1_l_c_p_1a0b673739018e4626f4f08b453e580eab" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>print</name></member>
      <member refid="class_game_1_1_l_c_p_1afffdded2f61d6dee34f312c8a2e4b356" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>q</name></member>
      <member refid="class_game_1_1_l_c_p_1a187fe2df5192bc2354944d807a361333" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>RlxdModel</name></member>
      <member refid="class_game_1_1_l_c_p_1a7c3f4e815fd66dd5d516d911f588857c" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>save</name></member>
      <member refid="class_game_1_1_l_c_p_1a9cb1d44937ea87d794352f94bf1f6fe3" prot="protected" virt="non-virtual"><scope>Game::LCP</scope><name>solEncode</name></member>
      <member refid="class_game_1_1_l_c_p_1ae7cfc28ee5fe3b678522e191cf265fe3" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>solEncode</name></member>
      <member refid="class_game_1_1_l_c_p_1a33a303e1e3643475f06dd1204dd6c27c" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>solEncode</name></member>
      <member refid="class_game_1_1_l_c_p_1ac7b07ba8761ea4fbd7164febaf25d696" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>UseIndicators</name></member>
      <member refid="class_game_1_1_l_c_p_1abd4348549394ab1692315b26620eceab" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>write</name></member>
      <member refid="class_game_1_1_l_c_p_1ab5c2258c4d017ca269c42ba1d689c5ed" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>zFromX</name></member>
      <member refid="class_game_1_1_l_c_p_1acd69c7ff6422ebbb8ab0b5d83812e262" prot="public" virt="non-virtual"><scope>Game::LCP</scope><name>~LCP</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
