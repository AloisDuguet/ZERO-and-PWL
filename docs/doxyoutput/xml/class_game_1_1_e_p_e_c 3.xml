<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_game_1_1_e_p_e_c" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Game::EPEC</compoundname>
    <derivedcompoundref refid="class_models_1_1_e_p_e_c" prot="public" virt="non-virtual">Models::EPEC</derivedcompoundref>
    <includes refid="_e_p_e_c__test_8h" local="no">EPEC_test.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ad0c30f87298df78ec8b2275fc272745f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::SizesWithoutHull</definition>
        <argsstring></argsstring>
        <name>SizesWithoutHull</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="71" column="15" bodyfile="include/games/EPEC_test.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a1f958d036ee7569e9488f454158d9c8a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Game::LCP&gt; Game::EPEC::TheLCP</definition>
        <argsstring></argsstring>
        <name>TheLCP</name>
        <briefdescription>
<para>The <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> nash game written as an <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="72" column="19" bodyfile="include/games/EPEC_test.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt;GRBModel&gt; Game::EPEC::LCPModel</definition>
        <argsstring></argsstring>
        <name>LCPModel</name>
        <briefdescription>
<para>A Gurobi mode object of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> form of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="74" column="7" bodyfile="include/games/EPEC_test.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ada0cf8c4cefee9d0e3f6fcd29aa4fac0" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt;GRBModel&gt; Game::EPEC::LCPModelBase</definition>
        <argsstring></argsstring>
        <name>LCPModelBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Gurobi mode object of the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> form of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref>. If we are searching for a pure NE, the <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> which is indifferent to pure or mixed NE is stored in this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="76" column="7" bodyfile="include/games/EPEC_test.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1afc5252004b0a5c875fdf4517ba60fecd" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::NumVariables</definition>
        <argsstring></argsstring>
        <name>NumVariables</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="80" column="16" bodyfile="include/games/EPEC_test.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a8e4aa5e6b5baa41c7a977b3b66cdfdf2" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::NumPlayers</definition>
        <argsstring></argsstring>
        <name>NumPlayers</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="81" column="16" bodyfile="include/games/EPEC_test.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a085ac9ace1a3aef12e61c03463dee800" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_algorithms_1_1_e_p_e_c_1_1_algorithm" kindref="compound">Algorithms::EPEC::Algorithm</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Algorithms::EPEC::Algorithm&gt; Game::EPEC::Algorithm</definition>
        <argsstring></argsstring>
        <name>Algorithm</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="82" column="19" bodyfile="include/games/EPEC_test.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_nash_game" kindref="compound">Game::NashGame</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::NashGame&gt; &gt; Game::EPEC::PlayersLowerLevels</definition>
        <argsstring></argsstring>
        <name>PlayersLowerLevels</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="85" column="15" bodyfile="include/games/EPEC_test.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ae133b3254fa8258788d60f994d1f8e9f" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::LCP&gt; &gt; Game::EPEC::PlayersLCP</definition>
        <argsstring></argsstring>
        <name>PlayersLCP</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="86" column="15" bodyfile="include/games/EPEC_test.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Param&gt; &gt; Game::EPEC::PlayersQP</definition>
        <argsstring></argsstring>
        <name>PlayersQP</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The QP corresponding to each player. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="89" column="7" bodyfile="include/games/EPEC_test.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Objective&gt; &gt; Game::EPEC::LeaderObjective</definition>
        <argsstring></argsstring>
        <name>LeaderObjective</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Objective of each leader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="91" column="7" bodyfile="include/games/EPEC_test.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a08077df159307f005f5254e8f72eb5d8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Game::QP_Objective&gt; &gt; Game::EPEC::LeaderObjectiveConvexHull</definition>
        <argsstring></argsstring>
        <name>LeaderObjectiveConvexHull</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>convex hull computation </para>
        </briefdescription>
        <detaileddescription>
<para>Objective of each leader, given the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="93" column="7" bodyfile="include/games/EPEC_test.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a92ad8e8ed1ff48bcd5509dcbf893c185" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_game_1_1_nash_game" kindref="compound">Game::NashGame</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Game::NashGame&gt; Game::EPEC::TheNashGame</definition>
        <argsstring></argsstring>
        <name>TheNashGame</name>
        <briefdescription>
<para>The <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> nash game. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="96" column="19" bodyfile="include/games/EPEC_test.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a59b0ccd12c05db259bb7ca056daf453d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::LeaderLocations</definition>
        <argsstring></argsstring>
        <name>LeaderLocations</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Location of each leader </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="98" column="15" bodyfile="include/games/EPEC_test.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a618f3df2c40a9d456f9ceaf00802967c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; const unsigned int * &gt;</type>
        <definition>std::vector&lt;const unsigned int *&gt; Game::EPEC::LocEnds</definition>
        <argsstring></argsstring>
        <name>LocEnds</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of variables in the current player, including any number of convex hull variables at the current moment. The used, i.e., the inheritor of <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> has the responsibility to keep this correct by implementing an override of <ref refid="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" kindref="member">Game::EPEC::updateLocations</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="103" column="15" bodyfile="include/games/EPEC_test.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1afd414e30d05368455d9a2eaa166b6bfb" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Game::EPEC::ConvexHullVariables</definition>
        <argsstring></argsstring>
        <name>ConvexHullVariables</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="104" column="15" bodyfile="include/games/EPEC_test.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1aacadd9d4fb3fd17d2f142db8758f1be9" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::numMCVariables</definition>
        <argsstring></argsstring>
        <name>numMCVariables</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="105" column="16" bodyfile="include/games/EPEC_test.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a19ac846f7e3a018c47b61dc8b5089b60" prot="protected" static="no" mutable="no">
        <type>GRBEnv *</type>
        <definition>GRBEnv* Game::EPEC::Env</definition>
        <argsstring></argsstring>
        <name>Env</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="107" column="10" bodyfile="include/games/EPEC_test.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a9e4f44f67e4a2956673398847e5db614" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::EPEC::Finalized</definition>
        <argsstring></argsstring>
        <name>Finalized</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="108" column="8" bodyfile="include/games/EPEC_test.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a3dd72f644df2168162d60b12d0993a9d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Game::EPEC::NashEquilibrium</definition>
        <argsstring></argsstring>
        <name>NashEquilibrium</name>
        <initializer>{
      false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if computeNashEq returned an equilibrium. Note that this can be the equilibrium of an approximation, and not to the original game </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="109" column="8" bodyfile="include/games/EPEC_test.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a157723e234e69a264e9ccf3dec0ec745" prot="protected" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point Game::EPEC::InitTime</definition>
        <argsstring></argsstring>
        <name>InitTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="113" column="50" bodyfile="include/games/EPEC_test.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1a6bf4f89d2d8a9818da7d698da2c07f05" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_z_e_r_o_statistics" kindref="compound">ZEROStatistics</ref>&lt; <ref refid="class_data_1_1_e_p_e_c_1_1_data_object" kindref="compound">Data::EPEC::DataObject</ref> &gt;</type>
        <definition>ZEROStatistics&lt;Data::EPEC::DataObject&gt; Game::EPEC::Stats</definition>
        <argsstring></argsstring>
        <name>Stats</name>
        <initializer>=
      <ref refid="struct_z_e_r_o_statistics" kindref="compound">ZEROStatistics</ref>&lt;<ref refid="class_data_1_1_e_p_e_c_1_1_data_object" kindref="compound">Data::EPEC::DataObject</ref>&gt;(
          <ref refid="class_data_1_1_e_p_e_c_1_1_data_object" kindref="compound">Data::EPEC::DataObject</ref>())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store run time information and algorithm params </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="114" column="18" bodyfile="include/games/EPEC_test.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1aa1a2f0e5df60ca00ccad7b9a8a4f1c8a" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::EPEC::SolutionZ</definition>
        <argsstring></argsstring>
        <name>SolutionZ</name>
        <briefdescription>
<para>Solution equation values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="118" column="13" bodyfile="include/games/EPEC_test.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_game_1_1_e_p_e_c_1ac897450f8b0afb2346e872de2fbc82eb" prot="protected" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec Game::EPEC::SolutionX</definition>
        <argsstring></argsstring>
        <name>SolutionX</name>
        <briefdescription>
<para>Solution variable values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="119" column="7" bodyfile="include/games/EPEC_test.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a74fd85ddbe859b15e8c68da3e5ff1fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::EPEC::PolyBase</definition>
        <argsstring></argsstring>
        <name>Algorithms::EPEC::PolyBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="161" column="3" bodyfile="include/games/EPEC_test.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a41b53d96774790dfc8a32772af70baf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::EPEC::InnerApproximation</definition>
        <argsstring></argsstring>
        <name>Algorithms::EPEC::InnerApproximation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="163" column="3" bodyfile="include/games/EPEC_test.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a80f54ad000b35c06eb75fff05048f326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::EPEC::OuterApproximation</definition>
        <argsstring></argsstring>
        <name>Algorithms::EPEC::OuterApproximation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="165" column="3" bodyfile="include/games/EPEC_test.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1a5b55eef6b23b0411244d2b6b012a9f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::EPEC::CombinatorialPNE</definition>
        <argsstring></argsstring>
        <name>Algorithms::EPEC::CombinatorialPNE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="167" column="3" bodyfile="include/games/EPEC_test.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_game_1_1_e_p_e_c_1aaeeb633997197e4d131dc59f9f79ddbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Algorithms::EPEC::FullEnumeration</definition>
        <argsstring></argsstring>
        <name>Algorithms::EPEC::FullEnumeration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="169" column="3" bodyfile="include/games/EPEC_test.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::warmstart</definition>
        <argsstring>(arma::vec x)</argsstring>
        <name>warmstart</name>
        <param>
          <type>arma::vec</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Warmstarts <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> with a solution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para><ref refid="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" kindref="member">Game::EPEC::warmstart</ref> - to complete implementation? </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="120" column="8" bodyfile="src/games/epec.cpp" bodystart="496" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a2323518f6af325c254eaad444cea1317" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>(GRBEnv *env)</argsstring>
        <name>EPEC</name>
        <param>
          <type>GRBEnv *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="139" column="12" bodyfile="include/games/EPEC_test.h" bodystart="139" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a2ee93319f7d964f4c5df850bcf27504e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::makeObjectivePlayer</definition>
        <argsstring>(const unsigned int i, Game::QP_Objective &amp;QP_obj)=0</argsstring>
        <name>makeObjectivePlayer</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a189ce1f5b375df11455f428a40738039">makeObjectivePlayer</reimplementedby>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="struct_game_1_1_q_p___objective" kindref="compound">Game::QP_Objective</ref> &amp;</type>
          <declname>QP_obj</declname>
        </param>
        <briefdescription>
<para>Can be instantiated by a derived class only! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="143" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Game::EPEC::preFinalize</definition>
        <argsstring>()</argsstring>
        <name>preFinalize</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1aa9dacf6f8965a70a18d47e196cb6f03f">preFinalize</reimplementedby>
        <briefdescription>
<para>Empty function - optionally reimplementable in derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be optionally implemented by the derived class. Code in this class will be run <emphasis>before</emphasis> calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="147" column="16" bodyfile="src/games/epec.cpp" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Game::EPEC::postFinalize</definition>
        <argsstring>()</argsstring>
        <name>postFinalize</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a2e38c1ac580d46b2a0bdaa36a8d46e63">postFinalize</reimplementedby>
        <briefdescription>
<para>Empty function - optionally reimplementable in derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be optionally implemented by the derived class. Code in this class will be run <emphasis>after</emphasis> calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="149" column="16" bodyfile="src/games/epec.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::updateLocations</definition>
        <argsstring>()=0</argsstring>
        <name>updateLocations</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1adb4f3499fa2c03522ce997f0c3f63316">updateLocations</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="152" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1abd1f66626593e9f02132467bec62573c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Game::EPEC::makeMCConstraints</definition>
        <argsstring>(arma::sp_mat &amp;MC, arma::vec &amp;RHS) const</argsstring>
        <name>makeMCConstraints</name>
        <reimplementedby refid="class_models_1_1_e_p_e_c_1a92ed1b673ace45b835bc07cc9b30e6ea">makeMCConstraints</reimplementedby>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>MC</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="154" column="16" bodyfile="include/games/EPEC_test.h" bodystart="154" bodyend="157"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::addDummyLead</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>addDummyLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
          <briefdescription><para>The leader to whom dummy variables should be added </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Add Dummy variables for the leaders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Adds dummy variables to the leader of an <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> - useful after computing the convex hull.</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="123" column="8" bodyfile="src/games/epec.cpp" bodystart="83" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void</type>
        <definition>const void Game::EPEC::makePlayerQP</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>makePlayerQP</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Makes the <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> corresponding to the <computeroutput>i-th</computeroutput> country. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>First gets the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> object from <computeroutput><ref refid="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" kindref="member">Game::EPEC::PlayersLowerLevels</ref></computeroutput> and makes a <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> with this <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> as the lower level</para>
</listitem><listitem><para>This is achieved by calling <ref refid="class_game_1_1_l_c_p_1a6d217671aff04dd01e69f2311352611b" kindref="member">LCP::makeQP</ref> and using the objective value object in <computeroutput><ref refid="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" kindref="member">Game::EPEC::LeaderObjective</ref></computeroutput> </para>
</listitem><listitem><para>Finally the locations are updated owing to the complete convex hull calculated during the call to <ref refid="class_game_1_1_l_c_p_1a6d217671aff04dd01e69f2311352611b" kindref="member">LCP::makeQP</ref> <simplesect kind="note"><para>Overloaded as <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">Models::EPEC::makePlayerQP()</ref> </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="124" column="14" bodyfile="src/games/epec.cpp" bodystart="288" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a5db4c964c3d451ab55a5630e565753d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::makePlayersQPs</definition>
        <argsstring>()</argsstring>
        <name>makePlayersQPs</name>
        <briefdescription>
<para>Makes the <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> for all the countries. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls are made to <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">Models::EPEC::makePlayerQP(const unsigned int i)</ref> for each valid <computeroutput>i</computeroutput> <simplesect kind="note"><para>Overloaded as <ref refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" kindref="member">EPEC::makePlayerQP(unsigned int)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="126" column="8" bodyfile="src/games/epec.cpp" bodystart="322" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a4d84d3af33242733ec32b89f91d49158" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::makeTheLCP</definition>
        <argsstring>()</argsstring>
        <name>makeTheLCP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="128" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::computeLeaderLocations</definition>
        <argsstring>(unsigned int addSpaceForMC=0)</argsstring>
        <name>computeLeaderLocations</name>
        <param>
          <type>unsigned int</type>
          <declname>addSpaceForMC</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="130" column="8" bodyfile="src/games/epec.cpp" bodystart="101" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a03f5dc3947750c69b9c3bfdf675ab394" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXMinusI</definition>
        <argsstring>(const arma::vec &amp;x, const unsigned int &amp;i, arma::vec &amp;solOther) const</argsstring>
        <name>getXMinusI</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>solOther</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="132" column="8" bodyfile="src/games/epec.cpp" bodystart="112" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a37dca6fc0a76c12bc4bc0eac602e3633" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::computeNashEq</definition>
        <argsstring>(bool pureNE=false, double localTimeLimit=-1.0, bool check=false)</argsstring>
        <name>computeNashEq</name>
        <param>
          <type>bool</type>
          <declname>pureNE</declname>
          <defval>false</defval>
          <briefdescription><para>True if we search for a PNE </para>
</briefdescription>
        </param>
        <param>
          <type>double</type>
          <declname>localTimeLimit</declname>
          <defval>-1.0</defval>
          <briefdescription><para>Allowed time limit to run this function </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>check</declname>
          <defval>false</defval>
          <briefdescription><para>If true, the Algorithm will seek for the maximum number of NE. Then, it will check they are equilibria for the original problem </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that <ref refid="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" kindref="member">Game::EPEC::PlayersQP</ref> are all filled with a each country&apos;s <ref refid="class_game_1_1_q_p___param" kindref="compound">Game::QP_Param</ref> problem (either exact or approximate), computes the Nash equilibrium. <simplesect kind="return"><para>true if a Nash equilibrium is found</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="135" column="8" bodyfile="src/games/epec.cpp" bodystart="406" bodyend="494"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a1b8553cd89efb9951f7cec24b8c09b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>()=delete</argsstring>
        <name>EPEC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="171" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ae88d958afd4f98f1bb7638759ff1c753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::EPEC</definition>
        <argsstring>(EPEC &amp;)=delete</argsstring>
        <name>EPEC</name>
        <param>
          <type><ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="172" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a695b5ed41fdbbf18f2cea05383c2081f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Game::EPEC::~EPEC</definition>
        <argsstring>()=default</argsstring>
        <name>~EPEC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="173" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Finalizes the creation of a <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a bunch of job after all data for a <ref refid="class_game_1_1_e_p_e_c" kindref="compound">Game::EPEC</ref> object are given, namely. <ref refid="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" kindref="member">Models::EPEC::computeLeaderLocations</ref> - Adds the required dummy variables to each leader&apos;s problem so that a game among the leaders can be defined. Calls <ref refid="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" kindref="member">Game::EPEC::addDummyLead</ref><itemizedlist>
<listitem><para>Makes the market clearing constraint in each country. Calls </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" kindref="member">Game::EPEC::preFinalize()</ref> can be overridden, and that code will run before calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref></para>
<para><ref refid="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" kindref="member">Game::EPEC::postFinalize()</ref> can be overridden, and that code will run after calling <ref refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" kindref="member">Game::EPEC::finalize()</ref></para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="175" column="8" bodyfile="src/games/epec.cpp" bodystart="33" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a71db5d5bacd5a7b97437795d797f882b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void</type>
        <definition>const void Game::EPEC::findNashEq</definition>
        <argsstring>()</argsstring>
        <name>findNashEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Computes Nash equilibrium using the Algorithm set in <ref refid="class_game_1_1_e_p_e_c_1a085ac9ace1a3aef12e61c03463dee800" kindref="member">Game::EPEC::Algorithm</ref></para>
<para>Checks the value of <ref refid="class_game_1_1_e_p_e_c_1a085ac9ace1a3aef12e61c03463dee800" kindref="member">Game::EPEC::Algorithm</ref> and delegates the task to appropriate Algorithm wrappers.</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="177" column="14" bodyfile="src/games/epec.cpp" bodystart="542" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a9c3a719fb69eb3866aa6b440e9a31192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::isSolved</definition>
        <argsstring>(double tol=1e-5) const</argsstring>
        <name>isSolved</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Call the delegated Algorithm and return true if the <ref refid="class_game_1_1_e_p_e_c" kindref="compound">EPEC</ref> has been solved.</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="178" column="8" bodyfile="src/games/epec.cpp" bodystart="534" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; GRBModel &gt;</type>
        <definition>std::unique_ptr&lt; GRBModel &gt; Game::EPEC::respond</definition>
        <argsstring>(const unsigned int i, const arma::vec &amp;x) const</argsstring>
        <name>respond</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="180" column="19" bodyfile="src/games/epec.cpp" bodystart="193" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3fcda0d435da9c183b73df244ac863a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::respondSol</definition>
        <argsstring>(arma::vec &amp;sol, unsigned int player, const arma::vec &amp;x, const arma::vec &amp;prevDev={}) const</argsstring>
        <name>respondSol</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>sol</declname>
          <briefdescription><para>Optimal response </para>
</briefdescription>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>player</declname>
          <briefdescription><para>Player whose optimal response is to be computed </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
          <briefdescription><para>A std::vector of pure strategies (either for all players or all other players </para>
</briefdescription>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>prevDev</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the optimal objective value that is obtainable for the player <computeroutput>player</computeroutput> given the decision <computeroutput>x</computeroutput> of all other players.</para>
<para>Calls <ref refid="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" kindref="member">Game::EPEC::respond</ref> and obtains the std::unique_ptr to GRBModel of best response by player <computeroutput>player</computeroutput>. Then solves the model and returns the appropriate objective value. <simplesect kind="return"><para>The optimal objective value for the player <computeroutput>player</computeroutput>.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="183" column="10" bodyfile="src/games/epec.cpp" bodystart="214" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aacb304f764e52114fdedef15a0a90558" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::vec</type>
        <definition>const arma::vec Game::EPEC::getX</definition>
        <argsstring>() const</argsstring>
        <name>getX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="186" column="19" bodyfile="include/games/EPEC_test.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ad53ac72b21e5d73db9e552aa23fb2fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="188" column="8" bodyfile="include/games/EPEC_test.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aaaca9d7917b658c77e2fe048bf7a7214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::vec</type>
        <definition>const arma::vec Game::EPEC::getZ</definition>
        <argsstring>() const</argsstring>
        <name>getZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="190" column="19" bodyfile="include/games/EPEC_test.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1af02848579e2409da28ce975b8d116adc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Game::EPEC::isPureStrategy</definition>
        <argsstring>(double tol=1e-5) const</argsstring>
        <name>isPureStrategy</name>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>equilibrium is a pure strategy </para>
        </briefdescription>
        <detaileddescription>
<para>Return a bool indicating whether the </para>
        </detaileddescription>
        <inbodydescription>
<para>Call the delegated Algorithm and return true if the equilibrium is pure</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="192" column="8" bodyfile="src/games/epec.cpp" bodystart="527" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ac17da3390473477503b076e4867710ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_z_e_r_o_statistics" kindref="compound">ZEROStatistics</ref>&lt; <ref refid="class_data_1_1_e_p_e_c_1_1_data_object" kindref="compound">Data::EPEC::DataObject</ref> &gt;</type>
        <definition>ZEROStatistics&lt;Data::EPEC::DataObject&gt; Game::EPEC::getStatistics</definition>
        <argsstring>() const</argsstring>
        <name>getStatistics</name>
        <briefdescription>
<para>Get the EPECStatistics object for the current instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="197" column="18" bodyfile="include/games/EPEC_test.h" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1acbc098323dd83d07fa249630c8a56536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAlgorithm</definition>
        <argsstring>(Data::EPEC::Algorithms algorithm)</argsstring>
        <name>setAlgorithm</name>
        <param>
          <type><ref refid="namespace_data_1_1_e_p_e_c_1a3f4c2ba1ad7ce924bed99ddf193fd318" kindref="member">Data::EPEC::Algorithms</ref></type>
          <declname>algorithm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decides the Algorithm to be used for solving the given instance of the problem. The choice of algorithms are documented in Game::EPECalgorithm </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="201" column="8" bodyfile="src/games/epec.cpp" bodystart="622" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1ac14487f892f9d94d7d783e874fe4b5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setRecoverStrategy</definition>
        <argsstring>(Data::EPEC::RecoverStrategy strategy)</argsstring>
        <name>setRecoverStrategy</name>
        <param>
          <type><ref refid="namespace_data_1_1_e_p_e_c_1a347af28b83353df8afdbd4ee171565b3" kindref="member">Data::EPEC::RecoverStrategy</ref></type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decides the Algorithm to be used for recovering a PNE out of the InnerApproximation procedure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="203" column="8" bodyfile="src/games/epec.cpp" bodystart="631" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3425d5ca9abea1e5ab18f5e53bf91bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAggressiveness</definition>
        <argsstring>(unsigned int a)</argsstring>
        <name>setAggressiveness</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="205" column="8" bodyfile="include/games/EPEC_test.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a19e56d50e5ca900bb05247d7e4028772" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setNumThreads</definition>
        <argsstring>(unsigned int t)</argsstring>
        <name>setNumThreads</name>
        <param>
          <type>unsigned int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="209" column="8" bodyfile="include/games/EPEC_test.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a572fac1c8fb7571abbd3ccf002c7e650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setRandomSeed</definition>
        <argsstring>(unsigned int t)</argsstring>
        <name>setRandomSeed</name>
        <param>
          <type>unsigned int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="214" column="8" bodyfile="include/games/EPEC_test.h" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3b2335bc68d6464ad5af7e74ab91f243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setIndicators</definition>
        <argsstring>(bool val)</argsstring>
        <name>setIndicators</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="218" column="8" bodyfile="include/games/EPEC_test.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a437840f2bb7687b81585fc793b5be0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setPureNashEquilibrium</definition>
        <argsstring>(bool val)</argsstring>
        <name>setPureNashEquilibrium</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="222" column="8" bodyfile="include/games/EPEC_test.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a4b6238b4052069f2fd7122f327bb70c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setBoundPrimals</definition>
        <argsstring>(bool val)</argsstring>
        <name>setBoundPrimals</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="226" column="8" bodyfile="include/games/EPEC_test.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aab6e24f25d193a514b2c97681a5d2df8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setBoundBigM</definition>
        <argsstring>(double val)</argsstring>
        <name>setBoundBigM</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="230" column="8" bodyfile="include/games/EPEC_test.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a9e0fb6903f40b26e00ab1289300b2c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setDeviationTolerance</definition>
        <argsstring>(double val)</argsstring>
        <name>setDeviationTolerance</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="234" column="8" bodyfile="include/games/EPEC_test.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a3e714cdf0c2eac38a3d6cb17acde2109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setTimeLimit</definition>
        <argsstring>(double val)</argsstring>
        <name>setTimeLimit</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="238" column="8" bodyfile="include/games/EPEC_test.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a73bc0d776af3885481aafab39cff90d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::setAddPolyMethod</definition>
        <argsstring>(Data::LCP::PolyhedraStrategy add)</argsstring>
        <name>setAddPolyMethod</name>
        <param>
          <type><ref refid="namespace_data_1_1_l_c_p_1aa8773225c810ac45575f86ac803105ab" kindref="member">Data::LCP::PolyhedraStrategy</ref></type>
          <declname>add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="242" column="8" bodyfile="include/games/EPEC_test.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a7bf2d222ff193b83713849a89c4291ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Game::EPEC::getNumVar</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="247" column="7" bodyfile="include/games/EPEC_test.h" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a676146ffcd3ae1c43462afefebf77f02" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getNumLeaders</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumLeaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="249" column="16" bodyfile="include/games/EPEC_test.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a0bf1c7483795c1f08baabf2426ca933d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getPositionLeadFoll</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getPositionLeadFoll</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the j-th variable in the i-th leader Querying <ref refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" kindref="member">Game::EPEC::LCPModel</ref> for x[return-value] variable gives the appropriate variable</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="253" column="16" bodyfile="src/games/epec.cpp" bodystart="640" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aec1b59c633f797063362b0ae4323f8ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Game::EPEC::getPositionLeadLead</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getPositionLeadLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the position of the j-th Follower variable in the i-th leader Querying <ref refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" kindref="member">Game::EPEC::LCPModel</ref> for x[return-value] variable gives the appropriate variable</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="255" column="16" bodyfile="src/games/epec.cpp" bodystart="651" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a723c245afbc41788c993566aca9f238c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getValLeadFoll</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getValLeadFoll</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the value of the j-th variable in i-th leader</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="258" column="10" bodyfile="src/games/epec.cpp" bodystart="662" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a24faf8f9033094c380f38fe3f6609a27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Game::EPEC::getValLeadLead</definition>
        <argsstring>(unsigned int i, unsigned int j) const</argsstring>
        <name>getValLeadLead</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the value of the j-th non-follower variable in i-th leader</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="260" column="10" bodyfile="src/games/epec.cpp" bodystart="675" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aa9f848f3d44b529af6c7b7fb3b4789cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_game_1_1_l_c_p" kindref="compound">LCP</ref> &amp;</type>
        <definition>const LCP&amp; Game::EPEC::getLCPDescription</definition>
        <argsstring>() const</argsstring>
        <name>getLCPDescription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="class_game_1_1_l_c_p" kindref="compound">Game::LCP</ref> object solved in the last iteration either to solve the problem or to prove non-existence of Nash equilibrium. Object is returned using constant reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="265" column="13" bodyfile="include/games/EPEC_test.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1af4ba9e089745932ff3bf24897af53e5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const GRBModel &amp;</type>
        <definition>const GRBModel&amp; Game::EPEC::getLCPModel</definition>
        <argsstring>() const</argsstring>
        <name>getLCPModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the GRBModel solved in the last iteration to solve the problem or to prove non-existence of Nash equilibrium. Object is returned using constant reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="270" column="18" bodyfile="include/games/EPEC_test.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a37fed0d5194d7d4a25953e117593b3a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::writeLCPModel</definition>
        <argsstring>(const std::string &amp;filename) const</argsstring>
        <name>writeLCPModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the GRBModel solved in the last iteration to solve the problem or to prove non-existence of Nash equilibrium to a file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="274" column="8" bodyfile="include/games/EPEC_test.h" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1aa20feaa35c98de9e134190579a400cf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXWithoutHull</definition>
        <argsstring>(const arma::vec &amp;x, arma::vec &amp;xWithoutHull) const</argsstring>
        <name>getXWithoutHull</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>xWithoutHull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the the solution <computeroutput>x</computeroutput>, the method returns in <computeroutput>xWithoutHull</computeroutput> the x vector without the convex-hull&apos;s variables. Also, no MC variables are included</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="278" column="8" bodyfile="src/games/epec.cpp" bodystart="167" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_game_1_1_e_p_e_c_1a6f84ee2018f9bb85d0b1b53e65ff85e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Game::EPEC::getXofI</definition>
        <argsstring>(const arma::vec &amp;x, const unsigned int &amp;i, arma::vec &amp;solI, bool hull=false) const</argsstring>
        <name>getXofI</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>solI</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hull</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given the player id <computeroutput>i</computeroutput> and the solution <computeroutput>x</computeroutput>, the method returns in <computeroutput>xWithoutHull</computeroutput> the x vector for the given player, with the convex-hull&apos;s variables in case <computeroutput>hull</computeroutput> is false. Also, no MC variables are included</para>
        </inbodydescription>
        <location file="include/games/EPEC_test.h" line="279" column="8" bodyfile="src/games/epec.cpp" bodystart="144" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to handle a Nash game between leaders of Stackelberg games. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Models::EPEC</label>
        <link refid="class_models_1_1_e_p_e_c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>Attr&lt; std::vector&lt; unsigned int &gt; &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="2">
        <label>ZEROStatistics&lt; Data::EPEC::DataObject &gt;</label>
        <link refid="struct_z_e_r_o_statistics"/>
        <childnode refid="3" relation="usage">
          <edgelabel>WallClockTime</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>AlgorithmData</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>NumConstraints</edgelabel>
          <edgelabel>NumNonZero</edgelabel>
          <edgelabel>NumIterations</edgelabel>
          <edgelabel>NumVar</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>NumericalIssues</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>Status</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>Attr&lt; ZEROStatus &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="7">
        <label>Attr&lt; int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="13">
        <label>Attr&lt; Data::LCP::PolyhedraStrategy &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="12">
        <label>Attr&lt; Data::EPEC::Algorithms &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="8">
        <label>Attr&lt; bool &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="4">
        <label>Data::EPEC::DataObject</label>
        <link refid="class_data_1_1_e_p_e_c_1_1_data_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>BoundBigM</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>FeasiblePolyhedra</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>LostIntermediateEq</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>Aggressiveness</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>RecoverStrategy</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>BoundPrimals</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>Algorithm</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>PolyhedraStrategy</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Game::EPEC</label>
        <link refid="class_game_1_1_e_p_e_c"/>
        <childnode refid="2" relation="usage">
          <edgelabel>Stats</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Attr&lt; unsigned int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="3">
        <label>Attr&lt; double &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="5">
        <label>ZEROAlgorithmData</label>
        <link refid="class_z_e_r_o_algorithm_data"/>
        <childnode refid="3" relation="usage">
          <edgelabel>DeviationTolerance</edgelabel>
          <edgelabel>TimeLimit</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>RandomSeed</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>Threads</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>PureNashEquilibrium</edgelabel>
          <edgelabel>IndicatorConstraints</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Attr&lt; unsigned long int &gt;</label>
        <link refid="class_attr"/>
      </node>
      <node id="11">
        <label>Attr&lt; Data::EPEC::RecoverStrategy &gt;</label>
        <link refid="class_attr"/>
      </node>
    </collaborationgraph>
    <location file="include/games/EPEC_test.h" line="69" column="11" bodyfile="include/games/EPEC_test.h" bodystart="69" bodyend="281"/>
    <listofallmembers>
      <member refid="class_game_1_1_e_p_e_c_1ae0bd0fb7910bc4735c0c6481e1ab7c60" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>addDummyLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a085ac9ace1a3aef12e61c03463dee800" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithm</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a5b55eef6b23b0411244d2b6b012a9f91" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::EPEC::CombinatorialPNE</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aaeeb633997197e4d131dc59f9f79ddbc" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::EPEC::FullEnumeration</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a41b53d96774790dfc8a32772af70baf3" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::EPEC::InnerApproximation</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a80f54ad000b35c06eb75fff05048f326" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::EPEC::OuterApproximation</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a74fd85ddbe859b15e8c68da3e5ff1fa5" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>Algorithms::EPEC::PolyBase</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afcd0018e01a696881c8da744a3a05048" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>computeLeaderLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a37dca6fc0a76c12bc4bc0eac602e3633" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>computeNashEq</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afd414e30d05368455d9a2eaa166b6bfb" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>ConvexHullVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a19ac846f7e3a018c47b61dc8b5089b60" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Env</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a2323518f6af325c254eaad444cea1317" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1b8553cd89efb9951f7cec24b8c09b5f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ae88d958afd4f98f1bb7638759ff1c753" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>EPEC</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ab32d89068adc66f100a266bbf31bf63e" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>finalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9e4f44f67e4a2956673398847e5db614" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Finalized</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a71db5d5bacd5a7b97437795d797f882b" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>findNashEq</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa9f848f3d44b529af6c7b7fb3b4789cf" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getLCPDescription</name></member>
      <member refid="class_game_1_1_e_p_e_c_1af4ba9e089745932ff3bf24897af53e5f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getLCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a676146ffcd3ae1c43462afefebf77f02" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getNumLeaders</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a7bf2d222ff193b83713849a89c4291ba" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getNumVar</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a0bf1c7483795c1f08baabf2426ca933d" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getPositionLeadFoll</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aec1b59c633f797063362b0ae4323f8ea" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getPositionLeadLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ac17da3390473477503b076e4867710ac" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getStatistics</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a723c245afbc41788c993566aca9f238c" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getValLeadFoll</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a24faf8f9033094c380f38fe3f6609a27" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getValLeadLead</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aacb304f764e52114fdedef15a0a90558" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getX</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a03f5dc3947750c69b9c3bfdf675ab394" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>getXMinusI</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6f84ee2018f9bb85d0b1b53e65ff85e4" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getXofI</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa20feaa35c98de9e134190579a400cf7" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getXWithoutHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aaaca9d7917b658c77e2fe048bf7a7214" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>getZ</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a157723e234e69a264e9ccf3dec0ec745" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>InitTime</name></member>
      <member refid="class_game_1_1_e_p_e_c_1af02848579e2409da28ce975b8d116adc" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>isPureStrategy</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9c3a719fb69eb3866aa6b440e9a31192" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>isSolved</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a38b32268297c5cdf5334853d3ee2ba82" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>LCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ada0cf8c4cefee9d0e3f6fcd29aa4fac0" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>LCPModelBase</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a59b0ccd12c05db259bb7ca056daf453d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a191a899d044f94263965f8d184259e5b" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderObjective</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a08077df159307f005f5254e8f72eb5d8" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LeaderObjectiveConvexHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a618f3df2c40a9d456f9ceaf00802967c" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>LocEnds</name></member>
      <member refid="class_game_1_1_e_p_e_c_1abd1f66626593e9f02132467bec62573c" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>makeMCConstraints</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a2ee93319f7d964f4c5df850bcf27504e" prot="protected" virt="pure-virtual"><scope>Game::EPEC</scope><name>makeObjectivePlayer</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a66b446e508a6079805e7d8900f5db4ed" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makePlayerQP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a5db4c964c3d451ab55a5630e565753d0" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makePlayersQPs</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a4d84d3af33242733ec32b89f91d49158" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>makeTheLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3dd72f644df2168162d60b12d0993a9d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>NashEquilibrium</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aacadd9d4fb3fd17d2f142db8758f1be9" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>numMCVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a8e4aa5e6b5baa41c7a977b3b66cdfdf2" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>NumPlayers</name></member>
      <member refid="class_game_1_1_e_p_e_c_1afc5252004b0a5c875fdf4517ba60fecd" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>NumVariables</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ae133b3254fa8258788d60f994d1f8e9f" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1dc1b8bd642e450bc1e30eefe963fe13" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersLowerLevels</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a7e5d7741f612c5cf33e9bd44fad4e620" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>PlayersQP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aba9fd1fa8c9ee2e70afc62232ecfd6b0" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>postFinalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1abea72c0ff571c5168047e9a42e4182af" prot="protected" virt="virtual"><scope>Game::EPEC</scope><name>preFinalize</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad53ac72b21e5d73db9e552aa23fb2fec" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>reset</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6dc4295a2c585a695ca5c1b54f8a7883" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>respond</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3fcda0d435da9c183b73df244ac863a0" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>respondSol</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a73bc0d776af3885481aafab39cff90d9" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAddPolyMethod</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3425d5ca9abea1e5ab18f5e53bf91bd5" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAggressiveness</name></member>
      <member refid="class_game_1_1_e_p_e_c_1acbc098323dd83d07fa249630c8a56536" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setAlgorithm</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aab6e24f25d193a514b2c97681a5d2df8" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setBoundBigM</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a4b6238b4052069f2fd7122f327bb70c5" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setBoundPrimals</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a9e0fb6903f40b26e00ab1289300b2c8c" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setDeviationTolerance</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3b2335bc68d6464ad5af7e74ab91f243" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setIndicators</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a19e56d50e5ca900bb05247d7e4028772" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setNumThreads</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a437840f2bb7687b81585fc793b5be0d6" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setPureNashEquilibrium</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a572fac1c8fb7571abbd3ccf002c7e650" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setRandomSeed</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ac14487f892f9d94d7d783e874fe4b5d9" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setRecoverStrategy</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a3e714cdf0c2eac38a3d6cb17acde2109" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>setTimeLimit</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ad0c30f87298df78ec8b2275fc272745f" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>SizesWithoutHull</name></member>
      <member refid="class_game_1_1_e_p_e_c_1ac897450f8b0afb2346e872de2fbc82eb" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>SolutionX</name></member>
      <member refid="class_game_1_1_e_p_e_c_1aa1a2f0e5df60ca00ccad7b9a8a4f1c8a" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>SolutionZ</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a6bf4f89d2d8a9818da7d698da2c07f05" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>Stats</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a1f958d036ee7569e9488f454158d9c8a" prot="private" virt="non-virtual"><scope>Game::EPEC</scope><name>TheLCP</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a92ad8e8ed1ff48bcd5509dcbf893c185" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>TheNashGame</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a54e18b35ce3b7ce266daedf76759bef9" prot="protected" virt="pure-virtual"><scope>Game::EPEC</scope><name>updateLocations</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a219d10c724c0165cc0d8a1a7d613580d" prot="protected" virt="non-virtual"><scope>Game::EPEC</scope><name>warmstart</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a37fed0d5194d7d4a25953e117593b3a4" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>writeLCPModel</name></member>
      <member refid="class_game_1_1_e_p_e_c_1a695b5ed41fdbbf18f2cea05383c2081f" prot="public" virt="non-virtual"><scope>Game::EPEC</scope><name>~EPEC</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
